# main.py

import os
import threading
import re
import requests
import pandas as pd
from io import StringIO
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import (
    TOKEN, SELF_URL, PORT,
    BRANCH_URLS, VISIBILITY_GROUPS,
    NOTIFY_SHEET_URL
)
from zones import normalize_sheet_url, load_zones

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å ¬´–ù–∞–∑–∞–¥¬ª –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Ñ–∏–ª–∏–∞–ª–∞ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏ ‚Äî
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_initial_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    """
    –ï—Å–ª–∏ vis_flag == 'All' ‚Äî –¥–≤–µ —Å–µ—Ç–∏,
    'RU' ‚Äî —Ç–æ–ª—å–∫–æ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì,
    'RK' ‚Äî —Ç–æ–ª—å–∫–æ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å.
    –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –û—Ç—á—ë—Ç.
    """
    if vis_flag == "All":
        nets = ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    elif vis_flag == "RU":
        nets = ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"]
    else:  # 'RK'
        nets = ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    buttons = [[n] for n in nets] + [["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def build_branch_kb(uid: int, selected_net: str, branch_map: dict) -> ReplyKeyboardMarkup:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É —Ñ–∏–ª–∏–∞–ª—É (branch_map[uid] != 'All'),
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ. –ò–Ω–∞—á–µ ‚Äî –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏.
    """
    user_branch = branch_map[uid]
    if user_branch != "All":
        branches = [user_branch]
    else:
        branches = VISIBILITY_GROUPS[selected_net]
    buttons = [[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# ‚Äî /start ‚Äî
async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, branch_map, res_map, names, resp_map = load_zones()
    if uid not in branch_map:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
    context.user_data.clear()
    context.user_data.update({
        "step": "INIT",
        "vis_flag": vis_map[uid],      # All, RU –∏–ª–∏ RK
        "branch_user": branch_map[uid],
        "res_user": res_map[uid],      # –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –†–≠–° –∏–ª–∏ All
        "name": names[uid],
        "resp_map": resp_map,
    })

    kb = build_initial_kb(vis_map[uid])
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb
    )

# ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid  = update.effective_user.id
    vis_map, branch_map, res_map, names, resp_map = load_zones()
    if uid not in branch_map:
        return await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)

    step        = context.user_data.get("step", "INIT")
    vis_flag    = context.user_data["vis_flag"]
    branch_user = context.user_data["branch_user"]
    res_user    = context.user_data["res_user"]
    user_name   = context.user_data["name"]

    # ‚Äî –ù–∞–∑–∞–¥ ‚Äî
    if text == "üîô –ù–∞–∑–∞–¥":
        if step in ("AWAIT_TP_INPUT","DISAMBIGUOUS","SEARCH_DONE",
                    "NOTIFY_AWAIT_TP","NOTIFY_DISAMBIGUOUS","NOTIFY_AWAIT_VL","NOTIFY_WAIT_GEO"):
            # –≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–∏–ª–∏–∞–ª–µ
            context.user_data["step"] = "BRANCH_SELECTED"
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        if step == "NETWORK_SELECTED":
            context.user_data["step"] = "INIT"
            kb = build_initial_kb(vis_flag)
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb)
        # INIT, VIEW_PHONES, VIEW_REPORT
        context.user_data["step"] = "INIT"
        kb = build_initial_kb(vis_flag)
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb)

    # ‚Äî INIT: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî
    if step == "INIT":
        # –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –æ—Ç—á—ë—Ç –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            return await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
        if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "VIEW_REPORT"
            return await update.message.reply_text("üìù –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=kb_back)

        # –°–µ—Ç–∏ –ø–æ vis_flag
        allowed_nets = []
        if vis_flag == "All":
            allowed_nets = ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
        elif vis_flag == "RU":
            allowed_nets = ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"]
        else:
            allowed_nets = ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]

        if text in allowed_nets:
            # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞
            context.user_data["step"]       = "NETWORK_SELECTED"
            context.user_data["selected_net"] = text
            kb = build_branch_kb(uid, text, branch_map)
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)

        # –∫–ª–∏–∫–Ω—É–ª –ø–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º—É
        return await update.message.reply_text(
            f"{user_name}, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ: {', '.join(allowed_nets)} üòï",
            reply_markup=build_initial_kb(vis_flag)
        )

    # ‚Äî NETWORK_SELECTED: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî
    if step == "NETWORK_SELECTED":
        selected_net = context.user_data["selected_net"]
        # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
        if branch_user != "All":
            allowed_branches = [branch_user]
        else:
            allowed_branches = VISIBILITY_GROUPS[selected_net]

        if text in allowed_branches:
            context.user_data["step"] = "BRANCH_SELECTED"
            context.user_data["current_branch"] = text
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        # –∫–ª–∏–∫–Ω—É–ª —á—É–∂–æ–π —Ñ–∏–ª–∏–∞–ª
        allowed = allowed_branches[0] if len(allowed_branches)==1 else ", ".join(allowed_branches)
        return await update.message.reply_text(
            f"{user_name}, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª(—ã): {allowed} üòï",
            reply_markup=build_branch_kb(uid, selected_net, branch_map)
        )

    # ‚Äî BRANCH_SELECTED: –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî
    if step == "BRANCH_SELECTED":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)

        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            if res_user == "All":
                return await update.message.reply_text(
                    f"{user_name}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –†–≠–° üòï",
                    reply_markup=kb_actions
                )
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)

        # –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –∏–≥–Ω–æ—Ä
        return

    # (–¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à—É —Ä–∞–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,
    #  –æ–Ω–∞ —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ res_user –∏ uses context.user_data["step"])

    # ‚Ä¶ –≤–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AWAIT_TP_INPUT, DISAMBIGUOUS, NOTIFY_AWAIT_TP, NOTIFY_DISAMBIGUOUS, NOTIFY_AWAIT_VL, location_handler ‚Ä¶
    # –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç res_user –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–ª–∏–∞–ª–∞.

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
application.add_handler(CommandHandler("start", start_line))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{SELF_URL}/webhook"
    )
