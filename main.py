import threading
from flask import Flask
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram import Update, ReplyKeyboardMarkup
from config import TOKEN, SELF_URL, PORT, VISIBILITY_GROUPS, BRANCH_URLS
from zones import normalize_sheet_url, load_zones
import pandas as pd
import re
import requests
from io import StringIO

app = Flask(__name__)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
kb_initial = ReplyKeyboardMarkup(
    [["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"], ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"], ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]],
    resize_keyboard=True
)
kb_back = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
def kb_branches(branches):
    btns = [[b] for b in branches] + [["–ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)
kb_search = ReplyKeyboardMarkup([["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–ù–∞–∑–∞–¥"]], resize_keyboard=True)

# === Handlers ===
async def start_line(update: Update, context):
    uid = update.effective_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return
    context.user_data.clear()
    context.user_data["step"] = "INIT"
    context.user_data["res"] = rz[uid]
    context.user_data["name"] = names[uid]
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)

async def handle_text(update: Update, context):
    text = update.message.text.strip()
    uid = update.effective_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return
    step = context.user_data.get("step", "INIT")
    # –ù–∞–∑–∞–¥
    if text == "–ù–∞–∑–∞–¥":
        if step in ("AWAIT_TP_INPUT","DISAMBIGUOUS"):
            context.user_data["step"] = "BRANCH_SELECTED"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_search)
            return
        if step == "BRANCH_SELECTED":
            context.user_data["step"] = "INIT"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)
            return
        return
    # INIT
    if step == "INIT":
        if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
            return
        if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "VIEW_REPORT"
            await update.message.reply_text("üìù –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=kb_back)
            return
        if text in VISIBILITY_GROUPS:
            context.user_data["step"] = "NETWORK_SELECTED"
            context.user_data["visibility"] = text
            branches = VISIBILITY_GROUPS[text]
            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å ‚Äî —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb_branches(branches))
        return
    # NETWORK_SELECTED
    if step == "NETWORK_SELECTED":
        branches = VISIBILITY_GROUPS[context.user_data["visibility"]]
        if text in branches:
            context.user_data["step"] = "BRANCH_SELECTED"
            context.user_data["current_branch"] = text
            await update.message.reply_text(f"–§–∏–ª–∏–∞–ª {text} –≤—ã–±—Ä–∞–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb_search)
        return
    # BRANCH_SELECTED
    if step == "BRANCH_SELECTED":
        if text == "–ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
        return
    # AWAIT_TP_INPUT
    if step == "AWAIT_TP_INPUT":
        branch = context.user_data["current_branch"]
        res    = context.user_data["res"]
        # –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        url = normalize_sheet_url(BRANCH_URLS[branch])
        df  = pd.read_csv(url)
        if res != "All":
            df = df[df["–†–≠–°"] == res]
        df.columns = df.columns.str.strip()
        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r'\W','', regex=True)
        q = re.sub(r'\W','', text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]
        if found.empty:
            context.user_data["step"] = "BRANCH_SELECTED"
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_search)
            return
        unique_tp = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(unique_tp) > 1:
            context.user_data["step"] = "DISAMBIGUOUS"
            context.user_data["ambiguous_df"] = found
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp] + [["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¢–ü, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
            return
        # –æ–¥–Ω–∞ TP
        tp = unique_tp[0]
        for _, r in found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp].iterrows():
            await update.message.reply_text(
                f"üìç {tp}\n–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
                + (f", –¥–æ–≥–æ–≤–æ—Ä {r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
                reply_markup=kb_search
            )
        context.user_data["step"] = "BRANCH_SELECTED"
        return
    # DISAMBIGUOUS
    if step == "DISAMBIGUOUS":
        df = context.user_data["ambiguous_df"]
        if text in df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            for _, r in df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text].iterrows():
                await update.message.reply_text(
                    f"üìç {text}\n–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                    f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
                    + (f", –¥–æ–≥–æ–≤–æ—Ä {r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
                    reply_markup=kb_search
                )
            context.user_data["step"] = "BRANCH_SELECTED"
        return

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
application = ApplicationBuilder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start_line))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# –ó–∞–ø—É—Å–∫ webhook
if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT, url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
