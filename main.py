# main.py

import os
import threading
import re
import requests
import pandas as pd
import csv
from datetime import datetime, timezone
from io import BytesIO

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter

from config import (
    TOKEN, SELF_URL, PORT,
    BRANCH_URLS, NOTIFY_URLS,
    NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK
)
from zones import normalize_sheet_url, load_zones

BRANCH_KEY_MAP = {
    "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–π":      "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°",
    "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–π":   "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–π":       "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°",
    "–°–æ—á–∏–Ω—Å–∫–∏–π":        "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°",
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–π":       "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π":    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°",
    "–õ–∞–±–∏–Ω—Å–∫–∏–π":        "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π":    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°",
    "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–π":      "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°",
    "–ê–¥—ã–≥–µ–π—Å–∫–∏–π":       "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π":      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°",
    "–ó–∞–ø–∞–¥–Ω—ã–π":         "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°",
    "–í–æ—Å—Ç–æ—á–Ω—ã–π":        "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–∂–Ω—ã–π":            "–Æ–∂–Ω—ã–µ –≠–°",
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π": "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π":    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–°–µ–≤–µ—Ä–Ω—ã–π":         "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°",
}

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# Initialize logs files if missing
for lf in (NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK):
    if not os.path.exists(lf):
        with open(lf, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                "Filial","–†–≠–°",
                "SenderID","SenderName",
                "RecipientID","RecipientName",
                "Timestamp","Coordinates"
            ])

kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_initial_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    if f == "ALL":
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    elif f == "UG":
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"]
    else:
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    buttons = [[n] for n in nets] + [["üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def build_report_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    rows = []
    if f in ("ALL", "UG"):
        rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"])
    if f in ("ALL", "RK"):
        rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
    rows += [["üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"], ["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, raw_branch_map, res_map, names, resp_map = load_zones()
    if uid not in raw_branch_map:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    raw = raw_branch_map[uid]
    branch_key = "All" if raw == "All" else BRANCH_KEY_MAP.get(raw, raw)

    context.user_data.clear()
    context.user_data.update({
        "step":        "INIT",
        "vis_flag":    vis_map[uid],
        "branch_user": branch_key,
        "res_user":    res_map[uid],
        "name":        names[uid],
        "resp_map":    resp_map
    })

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=build_initial_kb(vis_map[uid])
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if "step" not in context.user_data:
        return await start_cmd(update, context)

    vis_map, raw_branch_map, res_map, names, resp_map = load_zones()
    step        = context.user_data["step"]
    vis_flag    = context.user_data["vis_flag"]
    branch_user = context.user_data["branch_user"]
    res_user    = context.user_data["res_user"]
    name        = context.user_data["name"]

    if text == "üîô –ù–∞–∑–∞–¥":
        if step in ("AWAIT_TP_INPUT","DISAMB","NOTIFY_AWAIT_TP","NOTIFY_DISAMB","NOTIFY_VL"):
            context.user_data["step"] = "BRANCH"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        if step == "REPORT_MENU":
            context.user_data["step"] = "INIT"
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=build_initial_kb(vis_flag)
            )
            return
        context.user_data["step"] = "INIT"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=build_initial_kb(vis_flag))
        return

    if step == "INIT":
        if text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
            return
        if text == "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "REPORT_MENU"
            await update.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag))
            return

        allowed = (["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì","‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if vis_flag=="All"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if vis_flag=="UG"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
        if text not in allowed:
            await update.message.reply_text(f"{name}, –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed)}", reply_markup=build_initial_kb(vis_flag))
            return

        selected_net = text.replace("‚ö° ","")
        context.user_data.update({"step":"NET","net":selected_net})
        if branch_user != "All":
            branches = [branch_user]
        else:
            branches = list(BRANCH_URLS[selected_net].keys())
        kb = ReplyKeyboardMarkup([[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)
        return

    if step == "REPORT_MENU":
        if text in ("üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"):
            log_file = NOTIFY_LOG_FILE_UG if text.endswith("–Æ–ì") else NOTIFY_LOG_FILE_RK
            df = pd.read_csv(log_file)
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="–õ–æ–≥–∏")
                ws = writer.sheets["–õ–æ–≥–∏"]
                # Header fill: light pink
                pink = PatternFill(fill_type="solid", start_color="FFF4F4", end_color="FFF4F4")
                for col_idx, col in enumerate(df.columns, 1):
                    cell = ws.cell(row=1, column=col_idx)
                    cell.fill = pink
                # Auto-width columns
                for idx, col in enumerate(df.columns, 1):
                    max_length = max(
                        df[col].astype(str).map(len).max(),
                        len(col)
                    )
                    ws.column_dimensions[get_column_letter(idx)].width = max_length + 2
            bio.seek(0)
            fname = "log_ug.xlsx" if text.endswith("–Æ–ì") else "log_rk.xlsx"
            await update.message.reply_document(bio, filename=fname)
        elif text == "üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º":
            await update.message.reply_text("üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ ‚Äî —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!", reply_markup=build_report_kb(vis_flag))
            return
        await update.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag))
        return

    if step == "NET":
        selected_net = context.user_data["net"]
        if branch_user!="All" and text!=branch_user:
            await update.message.reply_text(f"{name}, –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª ¬´{branch_user}¬ª.", reply_markup=kb_back)
            return
        if text not in BRANCH_URLS[selected_net]:
            await update.message.reply_text(f"‚ö† –§–∏–ª–∏–∞–ª ¬´{text}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_back)
            return
        context.user_data.update({"step":"BRANCH","branch":text})
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        return

    if step == "BRANCH":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
            return
        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
            return

    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
# –¥–æ–±–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ MessageHandler –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–¥–µ—Å—å

if __name__ == "__main__":
    if SELF_URL:
        threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT,
        url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
