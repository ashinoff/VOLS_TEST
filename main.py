import threading
import re
import requests
import pandas as pd
from io import StringIO
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import (
    TOKEN,
    SELF_URL,
    PORT,
    BRANCH_URLS,
    VISIBILITY_GROUPS,
    NOTIFY_SHEET_URL,
)
from zones import normalize_sheet_url, load_zones

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
kb_initial = ReplyKeyboardMarkup(
    [["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"], ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"], ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]],
    resize_keyboard=True
)
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def kb_branches(branches):
    btns = [[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)

kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# === /start ===
async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, bz, rz, names, resp_map = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    context.user_data.clear()
    context.user_data["step"] = "INIT"
    context.user_data["res"] = rz[uid]
    context.user_data["name"] = names[uid]
    context.user_data["resp_map"] = resp_map  # –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb_initial
    )

# === —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid  = update.effective_user.id
    vis_map, bz, rz, names, resp_map = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    step = context.user_data.get("step", "INIT")

    # --- –ù–∞–∑–∞–¥ ---
    if text == "üîô –ù–∞–∑–∞–¥":
        # –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
        if step in ("NOTIFY_WAIT_GEO", "NOTIFY_AWAIT_VL", "NOTIFY_DISAMBIGUOUS", "NOTIFY_AWAIT_TP"):
            context.user_data["step"] = "BRANCH_SELECTED"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        # –∏–∑ –ø–æ–∏—Å–∫–∞ –¢–ü ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
        if step in ("AWAIT_TP_INPUT", "DISAMBIGUOUS", "SEARCH_DONE"):
            context.user_data["step"] = "BRANCH_SELECTED"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        # –∏–∑ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä —Å–µ—Ç–∏
        if step == "NETWORK_SELECTED":
            context.user_data["step"] = "INIT"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)
            return
        # –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤/–æ—Ç—á—ë—Ç–∞ ‚Äî —Ç–æ–∂–µ –≤ INIT
        context.user_data["step"] = "INIT"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)
        return

    # --- INIT: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if step == "INIT":
        if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
            return
        if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "VIEW_REPORT"
            await update.message.reply_text("üìù –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=kb_back)
            return
        if text in ("–†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"):
            context.user_data["step"] = "NETWORK_SELECTED"
            context.user_data["visibility"] = text
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
                reply_markup=kb_branches(VISIBILITY_GROUPS[text])
            )
        return

    # --- NETWORK_SELECTED: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ---
    if step == "NETWORK_SELECTED":
        branches = VISIBILITY_GROUPS[context.user_data["visibility"]]
        if text in branches:
            context.user_data["step"] = "BRANCH_SELECTED"
            context.user_data["current_branch"] = text
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        return

    # --- BRANCH_SELECTED: –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–∏–ª–∏–∞–ª–µ ---
    if step == "BRANCH_SELECTED":
        # –ü–æ–∏—Å–∫ –ø–æ –¢–ü
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
            return
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –†–≠–° (mode 3)
        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            # –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å res != "All"
            if context.user_data["res"] == "All":
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –†–≠–°.", reply_markup=kb_actions)
                return
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
            return
        return

    # --- AWAIT_TP_INPUT: –≤–≤–æ–¥ –¢–ü –∏ –ø–æ–∏—Å–∫ –æ–±—ã—á–Ω—ã–π ---
    if step == "AWAIT_TP_INPUT":
        branch = context.user_data["current_branch"]
        res    = context.user_data["res"]

        df = pd.read_csv(normalize_sheet_url(BRANCH_URLS[branch]))
        if res != "All":
            df = df[df["–†–≠–°"] == res]
        df.columns = df.columns.str.strip()
        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r'\W', '', regex=True)

        q = re.sub(r'\W','', text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]

        if found.empty:
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=kb_back)
            return

        unique_tp = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(unique_tp) > 1:
            context.user_data["step"] = "DISAMBIGUOUS"
            context.user_data["ambiguous_df"] = found
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –¢–ü, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
            return

        # –æ–¥–Ω–∞ –¢–ü
        tp = unique_tp[0]
        details = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp]
        count = len(details)
        res_name = details.iloc[0]["–†–≠–°"]
        await update.message.reply_text(
            f"{res_name}, {tp} ({count}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_actions
        )
        for _, r in details.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        context.user_data["step"] = "BRANCH_SELECTED"
        return

    # --- DISAMBIGUOUS: –≤—ã–±–æ—Ä –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ---
    if step == "DISAMBIGUOUS":
        df = context.user_data["ambiguous_df"]
        if text in df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            details = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
            count = len(details)
            res_name = details.iloc[0]["–†–≠–°"]
            await update.message.reply_text(
                f"{res_name}, {text} ({count}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb_actions
            )
            for _, r in details.iterrows():
                await update.message.reply_text(
                    f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                    f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                    reply_markup=kb_actions
                )
            context.user_data["step"] = "BRANCH_SELECTED"
        return

    # --- NOTIFY_AWAIT_TP: –≤–≤–æ–¥ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    if step == "NOTIFY_AWAIT_TP":
        # —á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        dfn = pd.read_csv(normalize_sheet_url(NOTIFY_SHEET_URL))
        dfn.columns = dfn.columns.str.strip()
        dfn["D_UP"] = dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r'\W','', regex=True)

        q = re.sub(r'\W','', text.upper())
        found = dfn[dfn["D_UP"].str.contains(q, na=False)]

        if found.empty:
            await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=kb_back)
            return

        unique_tp = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(unique_tp) > 1:
            context.user_data["step"] = "NOTIFY_DISAMBIGUOUS"
            context.user_data["notify_df"] = found
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–ù–µ—Å–∫–æ–ª—å–∫–æ –¢–ü‚Äî–≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
            return

        # –æ–¥–Ω–∞ –¢–ü
        tp = unique_tp[0]
        context.user_data["step"] = "NOTIFY_AWAIT_VL"
        context.user_data["notify_df"] = found
        context.user_data["notify_tp"] = tp
        vls = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp]["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        kb = ReplyKeyboardMarkup([[vl] for vl in vls] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=kb)
        return

    # --- NOTIFY_DISAMBIGUOUS: –≤—ã–±–æ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    if step == "NOTIFY_DISAMBIGUOUS":
        dfn = context.user_data["notify_df"]
        if text in dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            context.user_data["step"] = "NOTIFY_AWAIT_VL"
            context.user_data["notify_tp"] = text
            vls = dfn[dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
            kb = ReplyKeyboardMarkup([[vl] for vl in vls] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=kb)
        return

    # --- NOTIFY_AWAIT_VL: –≤—ã–±–æ—Ä –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    if step == "NOTIFY_AWAIT_VL":
        dfn = context.user_data["notify_df"]
        if text in dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique():
            context.user_data["step"] = "NOTIFY_WAIT_GEO"
            context.user_data["notify_vl"] = text
            await update.message.reply_text(
                "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
                reply_markup=kb_request_location
            )
        return

# === –õ–æ–≤–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") != "NOTIFY_WAIT_GEO":
        return
    loc = update.message.location
    uid = update.effective_user.id
    _, _, _, _, resp_map = load_zones()
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ res_map
    current_resp = resp_map.get(uid)
    # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π ‚Äî –≤—Å–µ —Å —Ç–∞–∫–∏–º –∂–µ responsible, –∫—Ä–æ–º–µ —Å–µ–±—è
    recipients = [
        uid2 for uid2, r in resp_map.items()
        if r == current_resp and uid2 != uid
    ]
    tp = context.user_data["notify_tp"]
    vl = context.user_data["notify_vl"]
    branch = context.user_data["current_branch"]
    # —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
    for chat_id in recipients:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ {branch} / {tp} / {vl}"
        )
        await context.bot.send_location(
            chat_id=chat_id,
            latitude=loc.latitude,
            longitude=loc.longitude
        )
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    await update.message.reply_text(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º: {', '.join(map(str, recipients))}",
        reply_markup=kb_actions
    )
    context.user_data["step"] = "BRANCH_SELECTED"

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start_line))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# –ó–∞–ø—É—Å–∫ webhook
if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{SELF_URL}/webhook"
    )
