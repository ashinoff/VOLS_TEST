import os
import threading
import re
import requests
import pandas as pd
import csv
from datetime import datetime, timezone
from io import BytesIO

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes,
)

from config import (
    TOKEN, SELF_URL, PORT,
    BRANCH_URLS, NOTIFY_URLS,
    NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK,
    HELP_FOLDER
)
from zones import normalize_sheet_url, load_zones

# –ú–∞–ø–ø–∏–Ω–≥ ¬´—Å—ã—Ä–æ–≥–æ¬ª –∏–º–µ–Ω–∏ —Ñ–∏–ª–∏–∞–ª–∞ –≤ –∫–ª—é—á BRANCH_URLS
BRANCH_KEY_MAP = {
    "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–π":      "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°",
    "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–π":   "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–π":       "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°",
    "–°–æ—á–∏–Ω—Å–∫–∏–π":        "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°",
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–π":       "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π":    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°",
    "–õ–∞–±–∏–Ω—Å–∫–∏–π":        "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π":    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°",
    "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–π":      "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°",
    "–ê–¥—ã–≥–µ–π—Å–∫–∏–π":       "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π":      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°",
    "–ó–∞–ø–∞–¥–Ω—ã–π":         "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°",
    "–í–æ—Å—Ç–æ—á–Ω—ã–π":        "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–∂–Ω—ã–π":            "–Æ–∂–Ω—ã–µ –≠–°",
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π": "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π":    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–°–µ–≤–µ—Ä–Ω—ã–π":         "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°",
}

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É HELP_FOLDER, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if HELP_FOLDER and not os.path.isdir(HELP_FOLDER):
    os.makedirs(HELP_FOLDER, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV-–ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
for lf in (NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK):
    if not os.path.exists(lf):
        with open(lf, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                "Filial","–†–≠–°","SenderID","SenderName",
                "RecipientID","RecipientName","Timestamp","Coordinates"
            ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
     ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_initial_kb(vis_flag: str, res_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    nets = (["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì","‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if f=="ALL"
            else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if f=="UG"
            else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
    btns = [[n] for n in nets] + [["üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"]]
    if res_flag.strip().upper()=="ALL":
        btns += [["üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    btns += [["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]]
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)

def build_report_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    rows = []
    if f in ("ALL","UG"):
        rows.append(["üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –í–û–õ–° –Æ–ì"])
    if f in ("ALL","RK"):
        rows.append(["üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –í–û–õ–° –ö—É–±–∞–Ω—å"])
    rows += [["üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"],
             ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# /start
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, branch_map, res_map, names, resp_map = load_zones()
    if uid not in branch_map:
        return await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)

    raw = branch_map[uid]
    branch_key = "All" if raw=="All" else BRANCH_KEY_MAP.get(raw, raw)

    context.user_data.clear()
    context.user_data.update({
        "step":        "INIT",
        "vis_flag":    vis_map[uid],
        "res_user":    res_map[uid],
        "branch_user": branch_key,
        "name":        names[uid],
        "resp_map":    resp_map
    })

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=build_initial_kb(vis_map[uid], res_map[uid])
    )

# TEXT
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    data = context.user_data

    # –µ—Å–ª–∏ —Å–ø—Ä–∞–≤–∫–∞
    if text=="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞" and data.get("step")!="HELP_LIST":
        data["prev_step"] = data.get("step","INIT")
        try:
            files = sorted(os.listdir(HELP_FOLDER))
        except:
            return await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Å–ø—Ä–∞–≤–∫–∏.", reply_markup=kb_back
            )
        data["help_files"] = files
        data["step"] = "HELP_LIST"
        kb = ReplyKeyboardMarkup([[f] for f in files]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", reply_markup=kb)

    # –≤ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏
    if data.get("step")=="HELP_LIST":
        if text=="üîô –ù–∞–∑–∞–¥":
            data["step"] = data.get("prev_step","INIT")
            return await restore_menu(update,context)
        if text in data.get("help_files",[]):
            path = os.path.join(HELP_FOLDER,text)
            if text.lower().endswith((".png",".jpg",".jpeg")):
                await update.message.reply_photo(open(path,"rb"))
            else:
                await update.message.reply_document(open(path,"rb"))
            data["step"] = data.get("prev_step","INIT")
            return await restore_menu(update,context)

    # –∏–Ω–∞—á–µ ‚Äî –≤–∞—à –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (INIT, REPORT_MENU, NET, BRANCH,‚Ä¶)
    # –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ –±—ã–ª–æ –¥–æ —ç—Ç–æ–≥–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
    # –Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –≤—Å–µ—Ö –≤–µ—Ç–∫–∞—Ö –≤ reply_markup –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ‚Äú‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞‚Äù,
    # –∏ —á—Ç–æ –≤ –∫–æ–Ω—Ü–µ –µ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ restore_menu –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ‚Ä¶ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Ä¶
    pass  # <‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —É–∂–µ –æ—Ç–ª–∞–∂–µ–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å–ø—Ä–∞–≤–∫–∏
async def restore_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step","INIT")
    v = context.user_data["vis_flag"]
    r = context.user_data["res_user"]
    if step=="INIT":
        return await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=build_initial_kb(v,r)
        )
    if step=="REPORT_MENU":
        return await update.message.reply_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(v)
        )
    if step=="BRANCH":
        return await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions
        )
    return await update.message.reply_text("üîô –ù–∞–∑–∞–¥", reply_markup=kb_back)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))

if __name__=="__main__":
    if SELF_URL:
        threading.Thread(
            target=lambda: requests.get(f"{SELF_URL}/webhook"),
            daemon=True
        ).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT,
        url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
