# main.py
import threading
from flask import Flask
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from telegram import Update, ReplyKeyboardMarkup
import re
import requests
import pandas as pd
from io import StringIO

from config import TOKEN, SELF_URL, PORT, BRANCH_URLS, VISIBILITY_GROUPS
from zones import normalize_sheet_url, load_zones

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
kb_initial = ReplyKeyboardMarkup(
    [["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"], ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"], ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]],
    resize_keyboard=True
)
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
def kb_branches(branches):
    btns = [[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü", "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start_line(update: Update, context):
    uid = update.effective_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()
    context.user_data["step"] = "INIT"
    context.user_data["res"]  = rz[uid]
    context.user_data["name"] = names[uid]
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb_initial
    )

async def handle_text(update: Update, context):
    text = update.message.text.strip()
    uid  = update.effective_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    step = context.user_data.get("step", "INIT")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ---
    if text == "üîô –ù–∞–∑–∞–¥":
        if step in ("AWAIT_TP_INPUT", "DISAMBIGUOUS"):
            context.user_data["step"] = "BRANCH_SELECTED"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        if step == "BRANCH_SELECTED":
            context.user_data["step"] = "NETWORK_SELECTED"
            vis = context.user_data["visibility"]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb_branches(VISIBILITY_GROUPS[vis]))
            return
        # NETWORK_SELECTED, VIEW_PHONES, VIEW_REPORT
        context.user_data["step"] = "INIT"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)
        return

    # --- –®–∞–≥ INIT: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if step == "INIT":
        if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
            return
        if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "VIEW_REPORT"
            await update.message.reply_text("üìù –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=kb_back)
            return
        if text in ("–†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"):
            context.user_data["step"] = "NETWORK_SELECTED"
            context.user_data["visibility"] = text
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
                reply_markup=kb_branches(VISIBILITY_GROUPS[text])
            )
        return

    # --- –®–∞–≥ NETWORK_SELECTED: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ---
    if step == "NETWORK_SELECTED":
        branches = VISIBILITY_GROUPS[context.user_data["visibility"]]
        if text in branches:
            context.user_data["step"] = "BRANCH_SELECTED"
            context.user_data["current_branch"] = text
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb_actions
            )
        return

    # --- –®–∞–≥ BRANCH_SELECTED: –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–∏–ª–∏–∞–ª–µ ---
    if step == "BRANCH_SELECTED":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
        elif text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            await update.message.reply_text("‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É.", reply_markup=kb_actions)
        return

    # --- –®–∞–≥ AWAIT_TP_INPUT: –≤–≤–æ–¥ –¢–ü –∏ –ø–æ–∏—Å–∫ ---
    if step == "AWAIT_TP_INPUT":
        branch = context.user_data["current_branch"]
        res    = context.user_data.get("res")
        df = pd.read_csv(normalize_sheet_url(BRANCH_URLS[branch]))
        if res != "All":
            df = df[df["–†–≠–°"] == res]
        df.columns = df.columns.str.strip()
        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r'\W','', regex=True)

        q = re.sub(r'\W','', text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]

        if found.empty:
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=kb_back)
            return

        unique_tp = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(unique_tp) > 1:
            context.user_data["step"] = "DISAMBIGUOUS"
            context.user_data["ambiguous_df"] = found
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –¢–ü, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
            return

        # –û–¥–Ω–∞ –¢–ü ‚Äî –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏
        tp = unique_tp[0]
        details = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp]
        count = len(details)
        res_name = details.iloc[0]["–†–≠–°"]
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        await update.message.reply_text(
            f"{res_name}, {tp} ({count}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_actions
        )
        # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        for _, r in details.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, {context.user_data['name']}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=kb_actions
        )
        context.user_data["step"] = "BRANCH_SELECTED"
        return

    # --- –®–∞–≥ DISAMBIGUOUS: –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¢–ü ---
    if step == "DISAMBIGUOUS":
        df = context.user_data["ambiguous_df"]
        if text in df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            details = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
            count = len(details)
            res_name = details.iloc[0]["–†–≠–°"]
            await update.message.reply_text(
                f"{res_name}, {text} ({count}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb_actions
            )
            for _, r in details.iterrows():
                await update.message.reply_text(
                    f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                    f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                    reply_markup=kb_actions
                )
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, {context.user_data['name']}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                reply_markup=kb_actions
            )
            context.user_data["step"] = "BRANCH_SELECTED"
        return

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start_line))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# –ó–∞–ø—É—Å–∫ webhook
if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT, url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
