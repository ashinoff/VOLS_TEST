# main.py

import os
import threading
import re
import requests
import pandas as pd
import csv
from datetime import datetime, timezone
from io import BytesIO
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from config import (
    TOKEN, SELF_URL, PORT,
    ZONES_CSV_URL, BRANCH_URLS, NOTIFY_URLS,
    NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK
)
from zones import normalize_sheet_url, load_zones

# === Flask & Bot ===
app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
for lf in (NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK):
    if not os.path.exists(lf):
        with open(lf, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                "Filial","–†–≠–°",
                "SenderID","SenderName",
                "RecipientID","RecipientName",
                "Timestamp","Coordinates"
            ])

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_initial_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    if f == "ALL":
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    elif f == "UG":
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"]
    else:
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    rows = [[n] for n in nets] + [["üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def build_report_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    rows = []
    if f in ("ALL", "UG"):
        rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"])
    if f in ("ALL", "RK"):
        rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
    rows += [["üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"], ["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# === /start ===
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, raw_branch_map, res_map, names, resp_map = load_zones()
    if uid not in raw_branch_map:
        return await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)

    context.user_data.clear()
    context.user_data.update({
        "step":        "INIT",
        "vis_flag":    vis_map[uid],
        "branch_user": raw_branch_map[uid],  # –ª–∏–±–æ "All", –ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°" –∏ —Ç.–ø.
        "res_user":    res_map[uid],
        "name":        names[uid],
        "resp_map":    resp_map
    })
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=build_initial_kb(vis_map[uid])
    )

# === TEXT handler ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid  = update.effective_user.id

    # –ï—Å–ª–∏ /start –Ω–µ –±—ã–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
    if "step" not in context.user_data:
        return await start_cmd(update, context)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –∑–æ–Ω—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ CSV)
    vis_map, raw_branch_map, res_map, names, resp_map = load_zones()
    if uid not in raw_branch_map:
        return await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)

    step        = context.user_data["step"]
    vis_flag    = context.user_data["vis_flag"]
    branch_user = context.user_data["branch_user"]
    res_user    = context.user_data["res_user"]
    name        = context.user_data["name"]

    # ---- BACK ----
    if text == "üîô –ù–∞–∑–∞–¥":
        if step in ("AWAIT_TP_INPUT","DISAMB","NOTIFY_AWAIT_TP","NOTIFY_DISAMB","NOTIFY_VL"):
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ¬´BRANCH¬ª
            context.user_data["step"] = "BRANCH"
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        if step == "INIT":
            return
        if step == "REPORT_MENU":
            context.user_data["step"] = "INIT"
            return await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=build_initial_kb(vis_flag)
            )
        context.user_data["step"] = "INIT"
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=build_initial_kb(vis_flag))

    # ---- INIT ----
    if step == "INIT":
        if text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            return await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
        if text == "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "REPORT_MENU"
            return await update.message.reply_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag)
            )
        # –≤—ã–±–æ—Ä —Å–µ—Ç–∏
        allowed = (["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì","‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if vis_flag=="All"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if vis_flag=="UG"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
        if text not in allowed:
            return await update.message.reply_text(
                f"{name}, –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed)}", reply_markup=build_initial_kb(vis_flag)
            )
        selected_net = text.replace("‚ö° ","")
        context.user_data.update({"step":"NET","net":selected_net})
        # —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if branch_user != "All":
            branches = [branch_user]
        else:
            branches = list(BRANCH_URLS[selected_net].keys())
        kb = ReplyKeyboardMarkup([[b] for b in branches]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)

    # ---- REPORT_MENU ----
    if step == "REPORT_MENU":
        if text == "üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì":
            df = pd.read_csv(NOTIFY_LOG_FILE_UG)
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="UG")
            bio.seek(0)
            await update.message.reply_document(bio, filename="log_ug.xlsx")
            return await update.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag))
        if text == "üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å":
            df = pd.read_csv(NOTIFY_LOG_FILE_RK)
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="RK")
            bio.seek(0)
            await update.message.reply_document(bio, filename="log_rk.xlsx")
            return await update.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag))
        if text == "üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º":
            return await update.message.reply_text("üìã –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã‚Ä¶", reply_markup=build_report_kb(vis_flag))
        return

    # ---- NET: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ----
    if step == "NET":
        selected_net = context.user_data["net"]
        # —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø
        if branch_user!="All" and text!=branch_user:
            return await update.message.reply_text(
                f"{name}, –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å {branch_user}", reply_markup=kb_back
            )
        if text not in BRANCH_URLS[selected_net]:
            return await update.message.reply_text(
                f"‚ö† –§–∏–ª–∏–∞–ª ¬´{text}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.", reply_markup=kb_back
            )
        context.user_data.update({"step":"BRANCH","branch":text})
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)

    # ---- BRANCH: –ø–æ–∏—Å–∫ / —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ----
    if step == "BRANCH":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
        return

    # ---- AWAIT_TP_INPUT: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ ----
    if step == "AWAIT_TP_INPUT":
        net    = context.user_data["net"]
        branch = context.user_data["branch"].strip()
        url    = BRANCH_URLS[net].get(branch, "").strip()
        if not url:
            return await update.message.reply_text(
                f"‚ö†Ô∏è URL –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back
            )
        try:
            df = pd.read_csv(normalize_sheet_url(url))
        except Exception as e:
            return await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=kb_back)

        if res_user != "All":
            df = df[df["–†–≠–°"].str.upper() == res_user.upper()]

        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W","",regex=True)
        q = re.sub(r"\W","", text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]
        if found.empty:
            return await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)

        ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(ulist) > 1:
            context.user_data.update({"step":"DISAMB","amb_df":found})
            kb = ReplyKeyboardMarkup([[tp] for tp in ulist]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü:", reply_markup=kb)

        # –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        tp = ulist[0]
        det = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        resname = det.iloc[0]["–†–≠–°"]
        await update.message.reply_text(
            f"{resname}, {tp} ({len(det)}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=kb_actions
        )
        for _, r in det.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        context.user_data["step"] = "BRANCH"
        return

    # ---- DISAMB: —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¢–ü ----
    if step == "DISAMB":
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
        found = context.user_data["amb_df"]
        if text not in found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            return
        det = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==text]
        resname = det.iloc[0]["–†–≠–°"]
        await update.message.reply_text(
            f"{resname}, {text} ({len(det)}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=kb_actions
        )
        for _, r in det.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        context.user_data["step"] = "BRANCH"
        return

    # ---- NOTIFY_AWAIT_TP ----
    if step == "NOTIFY_AWAIT_TP":
        net    = context.user_data["net"]
        branch = context.user_data["branch"].strip()
        url    = NOTIFY_URLS.get(net, {}).get(branch, "").strip()
        if not url:
            return await update.message.reply_text(
                f"‚ö†Ô∏è URL-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back
            )
        try:
            dfn = pd.read_csv(normalize_sheet_url(url))
        except Exception as e:
            return await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {e}", reply_markup=kb_back)

        dfn["D_UP"] = dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W","",regex=True)
        q = re.sub(r"\W","", text.upper())
        found = dfn[dfn["D_UP"].str.contains(q, na=False)]
        if found.empty:
            return await update.message.reply_text("üîî –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)

        ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(ulist) > 1:
            context.user_data.update({"step":"NOTIFY_DISAMB","dfn":found})
            kb = ReplyKeyboardMarkup([[tp] for tp in ulist]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)

        tp = ulist[0]
        df0 = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        context.user_data.update({"step":"NOTIFY_VL","df0":df0,"tp":tp})
        vls = df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        kb = ReplyKeyboardMarkup([[vl] for vl in vls]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=kb)

    # ---- NOTIFY_DISAMB ----
    if step == "NOTIFY_DISAMB":
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
        dfn = context.user_data["dfn"]
        if text not in dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            return
        df0 = dfn[dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==text]
        context.user_data.update({"step":"NOTIFY_VL","df0":df0,"tp":text})
        vls = df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        kb = ReplyKeyboardMarkup([[vl] for vl in vls]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=kb)

    # ---- NOTIFY_VL ----
    if step == "NOTIFY_VL":
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
        df0 = context.user_data["df0"]
        if text not in df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique():
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb_back)
        context.user_data["vl"]   = text
        context.user_data["step"] = "NOTIFY_GEO"
        return await update.message.reply_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb_request_location)

# === LOCATION handler ===
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") != "NOTIFY_GEO":
        return
    loc     = update.message.location
    tp      = context.user_data["tp"]
    vl      = context.user_data["vl"]
    resname = context.user_data["res_user"]
    sender  = context.user_data["name"]
    _,_,_,names,resp_map = load_zones()
    recips  = [uid for uid,r in resp_map.items() if r==resname]
    msg     = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {sender}, {resname} –†–≠–°, {tp}, {vl} ‚Äì –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"

    fpath = NOTIFY_LOG_FILE_UG if context.user_data["net"]=="–†–æ—Å—Å–µ—Ç–∏ –Æ–ì" else NOTIFY_LOG_FILE_RK

    for cid in recips:
        await context.bot.send_message(cid, msg)
        await context.bot.send_location(cid, loc.latitude, loc.longitude)
        await context.bot.send_message(cid, f"üìç {loc.latitude:.6f},{loc.longitude:.6f}")
        with open(fpath, "a", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                context.user_data["branch"],
                resname,
                update.effective_user.id,
                sender,
                cid,
                names.get(cid,""),
                datetime.now(timezone.utc).isoformat(),
                f"{loc.latitude:.6f},{loc.longitude:.6f}"
            ])

    if recips:
        fio_list = [names[c] for c in recips]
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: {', '.join(fio_list)}",
            reply_markup=kb_actions
        )
    else:
        await update.message.reply_text(
            f"‚ö† –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ {resname} –†–≠–° –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.",
            reply_markup=kb_actions
        )
    context.user_data["step"] = "BRANCH"

# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))

if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{SELF_URL}/webhook"
    )
