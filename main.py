# main.py

import os
import threading
import re
import requests
import pandas as pd
from io import StringIO
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import TOKEN, SELF_URL, PORT, BRANCH_URLS, VISIBILITY_GROUPS, NOTIFY_SHEET_URL
from zones import normalize_sheet_url, load_zones

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# ‚Äî –ö–õ–ê–í–ò–ê–¢–£–†–´ ‚Äî
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def build_initial_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    flag = vis_flag.strip().upper()
    if flag == "ALL":
        nets = ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    elif flag == "UG":
        nets = ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"]
    elif flag == "RK":
        nets = ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    else:
        nets = []
    buttons = [[n] for n in nets] + [["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def build_branch_kb(uid: int, selected_net: str, branch_map: dict) -> ReplyKeyboardMarkup:
    user_branch = branch_map.get(uid, "All")
    if user_branch != "All":
        branches = [user_branch]
    else:
        branches = VISIBILITY_GROUPS.get(selected_net, [])
    btns = [[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)

kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# ‚Äî /start ‚Äî
async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, branch_map, res_map, names, resp_map = load_zones()
    if uid not in branch_map:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    context.user_data.clear()
    context.user_data.update({
        "step":        "INIT",
        "vis_flag":    vis_map[uid],
        "branch_user": branch_map[uid],
        "res_user":    res_map[uid],
        "resp_map":    resp_map,      # –¥–æ–±–∞–≤–ª–µ–Ω–æ
        "name":        names[uid],
    })

    kb = build_initial_kb(vis_map[uid])
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb)


# ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid  = update.effective_user.id
    vis_map, branch_map, res_map, names, resp_map = load_zones()
    if uid not in branch_map:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    step        = context.user_data.get("step", "INIT")
    vis_flag    = context.user_data["vis_flag"]
    branch_user = context.user_data["branch_user"]
    res_user    = context.user_data["res_user"]
    resp_map_u  = context.user_data["resp_map"].get(uid, "")  # –∏–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–∏–∑–Ω–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    user_name   = context.user_data["name"]

    # ‚Äî –ù–∞–∑–∞–¥ ‚Äî
    if text == "üîô –ù–∞–∑–∞–¥":
        # ... (–∫–∞–∫ —Ä–∞–Ω–µ–µ) ...
        return

    # ‚Äî INIT: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî
    if step == "INIT":
        # ... (—Ç–µ–ª–µ—Ñ–æ–Ω—ã/–æ—Ç—á—ë—Ç) ...

        # —Å–æ—Å—Ç–∞–≤–ª—è–µ–º allowed_nets –ø–æ vis_flag
        # (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

        if text in allowed_nets:
            # ... –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ NETWORK_SELECTED ...
        else:
            # ... –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ...

        return

    # ‚Äî NETWORK_SELECTED: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî
    if step == "NETWORK_SELECTED":
        # ... –∫–∞–∫ —Ä–∞–Ω–µ–µ ...
        return

    # ‚Äî BRANCH_SELECTED: –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî
    if step == "BRANCH_SELECTED":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            # ... –∫–∞–∫ —Ä–∞–Ω–µ–µ ...
            return

        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–æ—Å—Ç—É–ø–Ω–æ –í–°–ï–ú, –∫—Ä–æ–º–µ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å resp_map
            if resp_map_u != "":
                await update.message.reply_text(
                    f"{user_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üòï",
                    reply_markup=kb_actions
                )
                return
            # –¥–∞–ª—å—à–µ ‚Äî –≤–≤–æ–¥ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back
            )
            return
        return

    # ‚Äî AWAIT_TP_INPUT, DISAMBIGUOUS ‚Äî –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî

    # ‚Äî NOTIFY_AWAIT_TP: –≤–≤–æ–¥ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî
    if step == "NOTIFY_AWAIT_TP":
        # ... –∑–∞–≥—Ä—É–∑–∫–∞ dfn, –ø–æ–∏—Å–∫ ...
        # –ø—Ä–∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–º TP:
        tp2 = unique_tp[0]
        context.user_data.update({
            "step":        "NOTIFY_AWAIT_VL",
            "notify_df":   found,
            "notify_tp":   tp2,
            "notify_res":  found.iloc[0]["–†–≠–°"],  # –∏–∑–º–µ–Ω–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º RES –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        })
        # –¥–∞–ª—å—à–µ ‚Äî –≤—ã–±–æ—Ä –í–õ
        return

    # ‚Äî NOTIFY_AWAIT_VL: –≤—ã–±–æ—Ä –í–õ ‚Äî
    # ... –∫–∞–∫ —Ä–∞–Ω–µ–µ ...

    return


# ‚Äî –õ–æ–≤–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") != "NOTIFY_WAIT_GEO":
        return
    loc = update.message.location

    notify_res = context.user_data["notify_res"]      # –∏–∑–º–µ–Ω–µ–Ω–æ: –±–µ—Ä–µ–º –∏–∑ user_data
    sender_name = context.user_data["name"]
    tp = context.user_data["notify_tp"]
    vl = context.user_data["notify_vl"]

    _, _, _, _, resp_map2 = load_zones()
    # –ø–æ–ª—É—á–∞—Ç–µ–ª–∏: —Ç–µ, —É –∫–æ–≥–æ resp_map == notify_res
    recipients = [u for u, r in resp_map2.items() if r == notify_res]

    notif_text = f"{sender_name}, {notify_res}, {tp}, {vl} ‚Äî –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"
    for cid in recipients:
        await context.bot.send_message(chat_id=cid, text=notif_text)
        await context.bot.send_location(chat_id=cid, latitude=loc.latitude, longitude=loc.longitude)

    await update.message.reply_text(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(map(str, recipients))}",
        reply_markup=kb_actions
    )
    context.user_data["step"] = "BRANCH_SELECTED"


# ‚Äî –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ‚Äî
application.add_handler(CommandHandler("start", start_line))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))

if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT,
        url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
