# main.py

import os
import threading
import re
import requests
import pandas as pd
import csv
from datetime import datetime, timezone
from io import BytesIO

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import (
    TOKEN, SELF_URL, PORT,
    ZONES_CSV_URL,
    BRANCH_URLS, NOTIFY_URLS,
    NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK
)
from zones import normalize_sheet_url, load_zones

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´—Å—ã—Ä–æ–≥–æ¬ª –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ CSV –≤ –∫–ª—é—á–∏ BRANCH_URLS
BRANCH_KEY_MAP = {
    "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–π":      "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°",
    "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–π":   "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–π":       "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°",
    "–°–æ—á–∏–Ω—Å–∫–∏–π":        "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°",
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–π":       "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π":    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°",
    "–õ–∞–±–∏–Ω—Å–∫–∏–π":        "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π":    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°",
    "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–π":      "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°",
    "–ê–¥—ã–≥–µ–π—Å–∫–∏–π":       "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°",
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π":      "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°",
    "–ó–∞–ø–∞–¥–Ω—ã–π":         "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°",
    "–í–æ—Å—Ç–æ—á–Ω—ã–π":        "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–∂–Ω—ã–π":            "–Æ–∂–Ω—ã–µ –≠–°",
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π": "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π":    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–°–µ–≤–µ—Ä–Ω—ã–π":         "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°",
}

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
for lf in (NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK):
    if not os.path.exists(lf):
        with open(lf, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                "Filial","–†–≠–°",
                "SenderID","SenderName",
                "RecipientID","RecipientName",
                "Timestamp","Coordinates"
            ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_initial_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    if f == "ALL":
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    elif f == "UG":
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"]
    else:
        nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    buttons = [[n] for n in nets] + [["üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def build_report_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    rows = []
    if f in ("ALL", "UG"):
        rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"])
    if f in ("ALL", "RK"):
        rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
    rows += [["üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"], ["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, raw_branch_map, res_map, names, resp_map = load_zones()
    if uid not in raw_branch_map:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    raw_branch = raw_branch_map[uid]
    branch_key = "All" if raw_branch == "All" else BRANCH_KEY_MAP.get(raw_branch, raw_branch)

    context.user_data.clear()
    context.user_data.update({
        "step":        "INIT",
        "vis_flag":    vis_map[uid],
        "branch_user": branch_key,
        "res_user":    res_map[uid],
        "name":        names[uid],
        "resp_map":    resp_map
    })

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=build_initial_kb(vis_map[uid])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if "step" not in context.user_data:
        return await start_cmd(update, context)

    vis_map, raw_branch_map, res_map, names, resp_map = load_zones()
    step        = context.user_data["step"]
    vis_flag    = context.user_data["vis_flag"]
    branch_user = context.user_data["branch_user"]
    res_user    = context.user_data["res_user"]
    name        = context.user_data["name"]

    # ¬´–ù–∞–∑–∞–¥¬ª
    if text == "üîô –ù–∞–∑–∞–¥":
        if step in ("AWAIT_TP_INPUT","DISAMB"):
            context.user_data["step"] = "BRANCH"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        if step in ("NOTIFY_AWAIT_TP","NOTIFY_DISAMB","NOTIFY_VL"):
            context.user_data["step"] = "BRANCH"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        if step == "REPORT_MENU":
            context.user_data["step"] = "INIT"
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=build_initial_kb(vis_flag)
            )
            return
        context.user_data["step"] = "INIT"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=build_initial_kb(vis_flag)
        )
        return

    # –®–∞–≥ INIT
    if step == "INIT":
        if text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
            return
        if text == "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "REPORT_MENU"
            await update.message.reply_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag)
            )
            return

        allowed = (["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì","‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if vis_flag=="All"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if vis_flag=="UG"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
        if text not in allowed:
            await update.message.reply_text(
                f"{name}, –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(allowed)}",
                reply_markup=build_initial_kb(vis_flag)
            )
            return

        selected_net = text.replace("‚ö° ","")
        context.user_data.update({"step":"NET","net":selected_net})
        if branch_user != "All":
            branches = [branch_user]
        else:
            branches = list(BRANCH_URLS[selected_net].keys())
        kb = ReplyKeyboardMarkup([[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)
        return

    # –®–∞–≥ REPORT_MENU
    if step == "REPORT_MENU":
        if text == "üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì":
            df = pd.read_csv(NOTIFY_LOG_FILE_UG)
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as w:
                df.to_excel(w, index=False, sheet_name="UG")
            bio.seek(0)
            await update.message.reply_document(bio, filename="log_ug.xlsx")
        elif text == "üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å":
            df = pd.read_csv(NOTIFY_LOG_FILE_RK)
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as w:
                df.to_excel(w, index=False, sheet_name="RK")
            bio.seek(0)
            await update.message.reply_document(bio, filename="log_rk.xlsx")
        elif text == "üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º":
            await update.message.reply_text(
                "üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ ‚Äî —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!", reply_markup=build_report_kb(vis_flag)
            )
            return
        await update.message.reply_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag)
        )
        return

    # –®–∞–≥ NET (–≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞)
    if step == "NET":
        selected_net = context.user_data["net"]
        if branch_user!="All" and text!=branch_user:
            await update.message.reply_text(
                f"{name}, –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ñ–∏–ª–∏–∞–ª–æ–º ¬´{branch_user}¬ª.",
                reply_markup=kb_back
            )
            return
        if text not in BRANCH_URLS[selected_net]:
            await update.message.reply_text(
                f"‚ö† –§–∏–ª–∏–∞–ª ¬´{text}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.", reply_markup=kb_back
            )
            return
        context.user_data.update({"step":"BRANCH","branch":text})
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        return

    # –®–∞–≥ BRANCH (–¥–µ–π—Å—Ç–≤–∏—è)
    if step == "BRANCH":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
            return
        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
            return

    # –®–∞–≥ AWAIT_TP_INPUT (–ø–æ–∏—Å–∫ –ø–æ –¢–ü)
    if step == "AWAIT_TP_INPUT":
        net    = context.user_data["net"]
        branch = context.user_data["branch"]
        url    = BRANCH_URLS[net].get(branch,"").strip()
        if not url:
            await update.message.reply_text(
                f"‚ö†Ô∏è URL –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back
            )
            context.user_data["step"] = "BRANCH"
            return
        try:
            df = pd.read_csv(normalize_sheet_url(url))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", reply_markup=kb_back)
            context.user_data["step"] = "BRANCH"
            return

        if res_user!="All":
            df = df[df["–†–≠–°"].str.upper()==res_user.upper()]
        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W","",regex=True)
        q = re.sub(r"\W","", text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]
        if found.empty:
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)
            context.user_data["step"] = "BRANCH"
            return

        ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(ulist)>1:
            context.user_data.update({"step":"DISAMB","amb_df":found})
            kb = ReplyKeyboardMarkup([[tp] for tp in ulist] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü:", reply_markup=kb)
            return

        tp = ulist[0]
        det=found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        resname=det.iloc[0]["–†–≠–°"]
        await update.message.reply_text(
            f"{resname}, {tp} ({len(det)}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã:", reply_markup=kb_actions
        )
        for _,r in det.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        context.user_data["step"]="BRANCH"
        return

    # –®–∞–≥ DISAMB (—É—Ç–æ—á–Ω–µ–Ω–∏–µ –¢–ü)
    if step == "DISAMB":
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"]="AWAIT_TP_INPUT"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
            return
        found=context.user_data["amb_df"]
        if text not in found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            return
        det=found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==text]
        resname=det.iloc[0]["–†–≠–°"]
        await update.message.reply_text(
            f"{resname}, {text} ({len(det)}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã:", reply_markup=kb_actions
        )
        for _,r in det.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        context.user_data["step"]="BRANCH"
        return

    # –®–∞–≥ NOTIFY_AWAIT_TP (–Ω–∞—á–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    if step == "NOTIFY_AWAIT_TP":
        net    = context.user_data["net"]
        branch = context.user_data["branch"]
        url    = NOTIFY_URLS[net].get(branch,"").strip()
        if not url:
            await update.message.reply_text(
                f"‚ö†Ô∏è URL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back
            )
            context.user_data["step"] = "BRANCH"
            return
        try:
            df = pd.read_csv(normalize_sheet_url(url))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", reply_markup=kb_back)
            context.user_data["step"] = "BRANCH"
            return

        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W","",regex=True)
        q = re.sub(r"\W","", text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]
        if found.empty:
            await update.message.reply_text("üîç –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.", reply_markup=kb_back)
            context.user_data["step"] = "BRANCH"
            return

        ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(ulist)>1:
            context.user_data.update({"step":"NOTIFY_DISAMB","amb_df_notify":found})
            kb = ReplyKeyboardMarkup([[tp] for tp in ulist] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)
            return

        tp = ulist[0]
        context.user_data["tp"] = tp
        subset = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        vl_list = subset["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        context.user_data["vl_df"] = subset
        context.user_data["step"] = "NOTIFY_VL"
        kb = ReplyKeyboardMarkup([[vl] for vl in vl_list] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)
        return

    # –®–∞–≥ NOTIFY_DISAMB (—É—Ç–æ—á–Ω–µ–Ω–∏–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    if step == "NOTIFY_DISAMB":
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"]="NOTIFY_AWAIT_TP"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
            return
        found = context.user_data["amb_df_notify"]
        if text not in found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            return
        tp = text
        context.user_data["tp"] = tp
        subset = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        vl_list = subset["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        context.user_data["vl_df"] = subset
        context.user_data["step"] = "NOTIFY_VL"
        kb = ReplyKeyboardMarkup([[vl] for vl in vl_list] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)
        return

    # –®–∞–≥ NOTIFY_VL (–≤—ã–±–æ—Ä –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    if step == "NOTIFY_VL":
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"]="NOTIFY_AWAIT_TP"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
            return
        vl_df = context.user_data["vl_df"]
        if text not in vl_df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique():
            return
        context.user_data["vl"] = text
        context.user_data["step"] = "NOTIFY_GEO"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=kb_request_location
        )
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (NOTIFY_GEO)
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") != "NOTIFY_GEO":
        return
    loc = update.message.location
    tp = context.user_data["tp"]
    vl = context.user_data["vl"]
    resname = context.user_data["res_user"]
    sender = context.user_data["name"]
    _,_,_,names,resp_map = load_zones()
    recips = [u for u,r in resp_map.items() if r == resname]
    msg = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {sender}, {resname} –†–≠–°, {tp}, {vl} ‚Äì –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"
    fpath = NOTIFY_LOG_FILE_UG if context.user_data["net"]=="–†–æ—Å—Å–µ—Ç–∏ –Æ–ì" else NOTIFY_LOG_FILE_RK

    for cid in recips:
        await context.bot.send_message(cid, msg)
        await context.bot.send_location(cid, loc.latitude, loc.longitude)
        await context.bot.send_message(cid, f"üìç –®–∏—Ä–æ—Ç–∞: {loc.latitude:.6f}, –î–æ–ª–≥–æ—Ç–∞: {loc.longitude:.6f}")
        with open(fpath, "a", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                context.user_data["branch"],
                resname,
                update.effective_user.id,
                sender,
                cid,
                names.get(cid, ""),
                datetime.now(timezone.utc).isoformat(),
                f"{loc.latitude:.6f},{loc.longitude:.6f}"
            ])

    if recips:
        fio_list = [names[c] for c in recips]
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: {', '.join(fio_list)}",
            reply_markup=kb_actions
        )
    else:
        await update.message.reply_text(
            f"‚ö† –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ {resname} –†–≠–° –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.",
            reply_markup=kb_actions
        )
    context.user_data["step"] = "BRANCH"

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))

if __name__ == "__main__":
    if SELF_URL:
        threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT,
        url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
