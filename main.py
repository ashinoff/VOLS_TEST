import os
import asyncio
import time
import aiohttp
import aiofiles
import pandas as pd
import csv
import re
from datetime import datetime, timezone
from io import BytesIO
from enum import Enum
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
from config import (
    TOKEN, SELF_URL, PORT,
    BRANCH_URLS, NOTIFY_URLS,
    NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK
)
from zones import normalize_sheet_url, load_zones_cached

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–æ–≤
class BotStep(Enum):
    INIT = "INIT"
    NET = "NET"
    BRANCH = "BRANCH"
    AWAIT_TP_INPUT = "AWAIT_TP_INPUT"
    DISAMB = "DISAMB"
    NOTIFY_AWAIT_TP = "NOTIFY_AWAIT_TP"
    NOTIFY_DISAMB = "NOTIFY_DISAMB"
    NOTIFY_VL = "NOTIFY_VL"
    NOTIFY_GEO = "NOTIFY_GEO"
    VIEW_PHONES = "VIEW_PHONES"
    REPORT_MENU = "REPORT_MENU"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_initial_kb(vis_flag: str, res_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if f == "ALL" else \
           ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if f == "UG" else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    buttons = [[n] for n in nets]
    buttons.append(["üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"])
    if res_flag.strip().upper() == "ALL":
        buttons.append(["üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"])
    buttons.append(["üìñ –ü–æ–º–æ—â—å"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def build_report_kb(vis_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    rows = []
    if f in ("ALL", "UG"):
        rows.append(["üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Æ–ì"])
    if f in ("ALL", "RK"):
        rows.append(["üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ö—É–±–∞–Ω—å"])
    rows += [["üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"], ["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
for lf in (NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK):
    if not os.path.exists(lf):
        with open(lf, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                "Filial", "–†–≠–°", "SenderID", "SenderName",
                "RecipientID", "RecipientName", "Timestamp", "Coordinates"
            ])

async def get_cached_csv(context, url, cache_key, ttl=3600):
    """–ö—ç—à–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å—ã."""
    if cache_key not in context.bot_data or context.bot_data[cache_key]["expires"] < time.time():
        async with aiohttp.ClientSession() as session:
            async with session.get(normalize_sheet_url(url), timeout=10) as response:
                response.raise_for_status()
                df = pd.read_csv(BytesIO(await response.read()))
        context.bot_data[cache_key] = {"data": df, "expires": time.time() + ttl}
    return context.bot_data[cache_key]["data"]

async def log_notification(log_file, data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª."""
    async with aiofiles.open(log_file, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f, quoting=csv.QUOTE_MINIMAL)
        await f.write(writer.writerow(data))

# === /start ===
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é."""
    uid = update.effective_user.id
    try:
        vis_map, raw_branch_map, res_map, names, resp_map = await load_zones_cached(context)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω –¥–æ—Å—Ç—É–ø–∞: {e}", reply_markup=kb_back)
        return
    if uid not in raw_branch_map:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    raw = raw_branch_map[uid]
    branch_key = "All" if raw == "All" else raw  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ config.py
    context.user_data.clear()
    context.user_data.update({
        "step": BotStep.BRANCH.value if branch_key != "All" else BotStep.INIT.value,
        "vis_flag": vis_map[uid],
        "branch_user": branch_key,
        "res_user": res_map[uid],
        "name": names[uid],
        "resp_map": resp_map
    })

    if branch_key != "All":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
    else:
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=build_initial_kb(vis_map[uid], res_map[uid])
        )

# === /help ===
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    await update.message.reply_text(
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏ —Ñ–∏–ª–∏–∞–ª, –∑–∞—Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ.\n"
        "3. –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123).\n"
        "4. –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ –¢–ü, –í–õ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n"
        "5. –î–ª—è –æ—Ç—á—ë—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –æ–±—â–µ–º –¥–æ—Å—Ç—É–ø–µ).",
        reply_markup=kb_back
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤ ===
async def handle_init_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ (–≤—ã–±–æ—Ä —Å–µ—Ç–∏ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è)."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.INIT.value
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=build_initial_kb(vis_flag, res_user)
        )
        return
    if text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
        context.user_data["step"] = BotStep.VIEW_PHONES.value
        await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
        return
    if text == "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
        if res_user.strip().upper() != "ALL":
            await update.message.reply_text(
                f"{name}, –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—â–µ–º –¥–æ—Å—Ç—É–ø–µ –ø–æ –†–≠–°.",
                reply_markup=build_initial_kb(vis_flag, res_user)
            )
            return
        context.user_data["step"] = BotStep.REPORT_MENU.value
        await update.message.reply_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag)
        )
        return
    if text == "üìñ –ü–æ–º–æ—â—å":
        await help_cmd(update, context)
        return

    allowed = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if vis_flag == "All" else \
              ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if vis_flag == "UG" else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    if text not in allowed:
        await update.message.reply_text(
            f"{name}, –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed)}",
            reply_markup=build_initial_kb(vis_flag, res_user)
        )
        return

    selected_net = text.replace("‚ö° ", "")
    context.user_data.update({"step": BotStep.NET.value, "net": selected_net})
    branches = [context.user_data["branch_user"]] if context.user_data["branch_user"] != "All" else \
               list(BRANCH_URLS[selected_net].keys())
    kb = ReplyKeyboardMarkup([[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)

async def handle_net_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.INIT.value
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=build_initial_kb(vis_flag, res_user)
        )
        return
    selected_net = context.user_data["net"]
    branch_user = context.user_data["branch_user"]
    if branch_user != "All" and text != branch_user:
        await update.message.reply_text(
            f"{name}, –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª ¬´{branch_user}¬ª.", reply_markup=kb_back
        )
        return
    if text not in BRANCH_URLS[selected_net]:
        await update.message.reply_text(
            f"‚ö† –§–∏–ª–∏–∞–ª ¬´{text}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_back
        )
        return
    context.user_data.update({"step": BotStep.BRANCH.value, "branch": text})
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)

async def handle_branch_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∏—Å–∫ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.NET.value if context.user_data["branch_user"] == "All" else BotStep.INIT.value
        if context.user_data["branch_user"] == "All":
            branches = list(BRANCH_URLS[context.user_data["net"]].keys())
            kb = ReplyKeyboardMarkup([[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)
        else:
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=build_initial_kb(vis_flag, res_user)
            )
        return
    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
        context.user_data["step"] = BotStep.AWAIT_TP_INPUT.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123):", reply_markup=kb_back)
        return
    if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
        context.user_data["step"] = BotStep.NOTIFY_AWAIT_TP.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123):", reply_markup=kb_back)
        return

async def handle_await_tp_input_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.BRANCH.value
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        return
    net = context.user_data["net"]
    branch = context.user_data["branch"]
    url = BRANCH_URLS[net].get(branch, "")
    if not url:
        await update.message.reply_text(
            f"‚ö†Ô∏è URL –¥–ª—è ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back
        )
        context.user_data["step"] = BotStep.BRANCH.value
        return
    try:
        df = await get_cached_csv(context, url, f"{net}_{branch}")
        required_columns = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü", "–†–≠–°", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ", "–û–ø–æ—Ä—ã", "–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è"]
        if not all(col in df.columns for col in required_columns):
            await update.message.reply_text(
                f"‚ö†Ô∏è CSV –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(required_columns)}",
                reply_markup=kb_back
            )
            return
    except aiohttp.ClientError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", reply_markup=kb_back)
        return
    except pd.errors.EmptyDataError:
        await update.message.reply_text(f"‚ö†Ô∏è CSV-—Ñ–∞–π–ª –ø—É—Å—Ç", reply_markup=kb_back)
        return
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=kb_back)
        return

    if res_user.upper() != "ALL":
        df = df[df["–†–≠–°"].str.upper() == res_user.upper()]
    df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W", "", regex=True)
    q = re.sub(r"\W", "", text.upper())
    found = df[df["D_UP"].str.contains(q, na=False)]
    if found.empty:
        await update.message.reply_text(
            f"–í {res_user} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¢–ü, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            reply_markup=kb_back
        )
        context.user_data["step"] = BotStep.BRANCH.value
        return

    ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
    if len(ulist) > 1:
        context.user_data.update({"step": BotStep.DISAMB.value, "amb_df": found})
        kb = ReplyKeyboardMarkup([[tp] for tp in ulist] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü:", reply_markup=kb)
        return

    tp = ulist[0]
    det = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp]
    resname = det.iloc[0]["–†–≠–°"]
    await update.message.reply_text(
        f"{resname}, {tp} ({len(det)}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã:", reply_markup=kb_actions
    )
    for _, r in det.iterrows():
        await update.message.reply_text(
            f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞', '')}",
            reply_markup=kb_actions
        )
    context.user_data["step"] = BotStep.BRANCH.value

async def handle_disamb_step(update, context, text, vis_flag, res_user, name):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¢–ü."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.AWAIT_TP_INPUT.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123):", reply_markup=kb_back)
        return
    found = context.user_data["amb_df"]
    if text not in found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
        return
    det = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
    resname = det.iloc[0]["–†–≠–°"]
    await update.message.reply_text(
        f"{resname}, {text} ({len(det)}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã:", reply_markup=kb_actions
    )
    for _, r in det.iterrows():
        await update.message.reply_text(
            f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞', '')}",
            reply_markup=kb_actions
        )
    context.user_data["step"] = BotStep.BRANCH.value

async def handle_notify_await_tp_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.BRANCH.value
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        return
    net = context.user_data["net"]
    branch = context.user_data["branch"]
    url = NOTIFY_URLS[net].get(branch, "")
    if not url:
        await update.message.reply_text(
            f"‚ö†Ô∏è URL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back
        )
        context.user_data["step"] = BotStep.BRANCH.value
        return
    try:
        df = await get_cached_csv(context, url, f"notify_{net}_{branch}")
        required_columns = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü", "–†–≠–°", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"]
        if not all(col in df.columns for col in required_columns):
            await update.message.reply_text(
                f"‚ö†Ô∏è CSV —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(required_columns)}",
                reply_markup=kb_back
            )
            return
    except aiohttp.ClientError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", reply_markup=kb_back)
        return
    except pd.errors.EmptyDataError:
        await update.message.reply_text(f"‚ö†Ô∏è CSV-—Ñ–∞–π–ª –ø—É—Å—Ç", reply_markup=kb_back)
        return
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", reply_markup=kb_back)
        return

    df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W", "", regex=True)
    q = re.sub(r"\W", "", text.upper())
    found = df[df["D_UP"].str.contains(q, na=False)]
    if found.empty:
        await update.message.reply_text(
            f"üîî –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ ¬´{branch}¬ª.", reply_markup=kb_back
        )
        context.user_data["step"] = BotStep.BRANCH.value
        return
    ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
    if len(ulist) > 1:
        context.user_data.update({"step": BotStep.NOTIFY_DISAMB.value, "amb_df_notify": found})
        kb = ReplyKeyboardMarkup([[tp] for tp in ulist] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)
        return
    tp = ulist[0]
    context.user_data["tp"] = tp
    subset = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp]
    context.user_data["vl_df"] = subset
    context.user_data["notify_res"] = subset.iloc[0]["–†–≠–°"]
    context.user_data["step"] = BotStep.NOTIFY_VL.value
    vls = subset["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
    kb = ReplyKeyboardMarkup([[vl] for vl in vls] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)

async def handle_notify_disamb_step(update, context, text, vis_flag, res_user, name):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.NOTIFY_AWAIT_TP.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123):", reply_markup=kb_back)
        return
    found = context.user_data["amb_df_notify"]
    if text not in found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
        return
    context.user_data["tp"] = text
    subset = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
    context.user_data["vl_df"] = subset
    context.user_data["notify_res"] = subset.iloc[0]["–†–≠–°"]
    context.user_data["step"] = BotStep.NOTIFY_VL.value
    vls = subset["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
    kb = ReplyKeyboardMarkup([[vl] for vl in vls] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb)

async def handle_notify_vl_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –í–õ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.NOTIFY_AWAIT_TP.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123):", reply_markup=kb_back)
        return
    subset = context.user_data["vl_df"]
    if text not in subset["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique():
        return
    context.user_data["vl"] = text
    context.user_data["step"] = BotStep.NOTIFY_GEO.value
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb_request_location)

async def handle_report_menu_step(update, context, text, vis_flag, res_user, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤."""
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data["step"] = BotStep.INIT.value
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=build_initial_kb(vis_flag, res_user)
        )
        return
    if text == "üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤":
        net = context.user_data["net"]
        branch = context.user_data["branch"]
        url = BRANCH_URLS[net].get(branch, "")
        if not url:
            await update.message.reply_text(
                f"‚ö†Ô∏è URL –¥–ª—è ¬´{branch}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=build_report_kb(vis_flag)
            )
            return
        try:
            df = await get_cached_csv(context, url, f"{net}_{branch}")
            contractors = df[["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞"]].dropna().unique().tolist()
            if not contractors:
                await update.message.reply_text(
                    "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=build_report_kb(vis_flag)
                )
                return
            bio = BytesIO()
            pd.DataFrame({"–ü—Ä–æ–≤–∞–π–¥–µ—Ä": contractors}).to_excel(bio, index=False)
            bio.seek(0)
            await update.message.reply_document(bio, filename="contractors.xlsx")
        except Exception as e:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {e}", reply_markup=build_report_kb(vis_flag)
            )
        return
    if text in ("üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Æ–ì", "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ö—É–±–∞–Ω—å"):
        log_file = NOTIFY_LOG_FILE_UG if text == "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Æ–ì" else NOTIFY_LOG_FILE_RK
        try:
            df = pd.read_csv(log_file)
            if df.empty:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –õ–æ–≥ {log_file} –ø—É—Å—Ç.", reply_markup=build_report_kb(vis_flag)
                )
                return
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="–õ–æ–≥–∏")
                ws = writer.sheets["–õ–æ–≥–∏"]
                pink = PatternFill(fill_type="solid", start_color="FFF4F4", end_color="FFF4F4")
                for col_idx in range(1, len(df.columns) + 1):
                    ws.cell(row=1, column=col_idx).fill = pink
                for idx, col in enumerate(df.columns, start=1):
                    max_len = max(df[col].astype(str).map(len).max(), len(col))
                    ws.column_dimensions[get_column_letter(idx)].width = max_len + 2
            bio.seek(0)
            fname = "log_ug.xlsx" if text == "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Æ–ì" else "log_rk.xlsx"
            await update.message.reply_document(bio, filename=fname)
        except FileNotFoundError:
            await update.message.reply_text(
                f"‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_report_kb(vis_flag)
            )
        except Exception as e:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}", reply_markup=build_report_kb(vis_flag)
            )
        return
    await update.message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=build_report_kb(vis_flag)
    )

# === TEXT handler ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º."""
    text = update.message.text.strip()
    if "step" not in context.user_data:
        await start_cmd(update, context)
        return
    try:
        vis_map, raw_branch_map, res_map, names, resp_map = await load_zones_cached(context)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω –¥–æ—Å—Ç—É–ø–∞: {e}", reply_markup=kb_back)
        return
    step = context.user_data["step"]
    vis_flag = context.user_data["vis_flag"]
    res_user = context.user_data["res_user"]
    name = context.user_data["name"]

    handlers = {
        BotStep.INIT.value: handle_init_step,
        BotStep.NET.value: handle_net_step,
        BotStep.BRANCH.value: handle_branch_step,
        BotStep.AWAIT_TP_INPUT.value: handle_await_tp_input_step,
        BotStep.DISAMB.value: handle_disamb_step,
        BotStep.NOTIFY_AWAIT_TP.value: handle_notify_await_tp_step,
        BotStep.NOTIFY_DISAMB.value: handle_notify_disamb_step,
        BotStep.NOTIFY_VL.value: handle_notify_vl_step,
        BotStep.REPORT_MENU.value: handle_report_menu_step,
    }
    handler = handlers.get(step, lambda *args: None)
    await handler(update, context, text, vis_flag, res_user, name)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    if context.user_data.get("step") != BotStep.NOTIFY_GEO.value:
        return
    loc = update.message.location
    tp = context.user_data["tp"]
    vl = context.user_data["vl"]
    res_tp = context.user_data["notify_res"]
    sender = context.user_data["name"]
    net = context.user_data["net"]
    branch = context.user_data["branch"]
    recipients = [
        uid for uid, r in context.user_data["resp_map"].items()
        if r and r.strip().lower() == res_tp.strip().lower()
    ]

    msg = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {sender}, {res_tp} –†–≠–°, {tp}, {vl} ‚Äì –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"
    log_f = NOTIFY_LOG_FILE_UG if net == "–†–æ—Å—Å–µ—Ç–∏ –Æ–ì" else NOTIFY_LOG_FILE_RK
    for cid in recipients:
        await context.bot.send_message(cid, msg)
        await context.bot.send_location(cid, loc.latitude, loc.longitude)
        await context.bot.send_message(
            cid, f"üìç –®–∏—Ä–æ—Ç–∞: {loc.latitude:.6f}, –î–æ–ª–≥–æ—Ç–∞: {loc.longitude:.6f}"
        )
        await log_notification(log_f, [
            branch, res_tp, update.effective_user.id, sender,
            cid, context.user_data["resp_map"].get(cid, ""),
            datetime.now(timezone.utc).isoformat(),
            f"{loc.latitude:.6f},{loc.longitude:.6f}"
        ])

    if recipients:
        names_list = [context.user_data["resp_map"].get(c, "") for c in recipients]
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(names_list)}",
            reply_markup=kb_actions
        )
    else:
        await update.message.reply_text(
            f"‚ö† –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ {res_tp} –†–≠–° –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.",
            reply_markup=kb_actions
        )
    context.user_data["step"] = BotStep.BRANCH.value

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))

if __name__ == "__main__":
    if SELF_URL:
        async def start_webhook():
            """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è Render."""
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{SELF_URL}/webhook", timeout=10) as response:
                    response.raise_for_status()
        asyncio.run(start_webhook())
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{SELF_URL}/webhook"
    )
