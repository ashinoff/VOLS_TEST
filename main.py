# main.py

import os
import threading
import re
import requests
import pandas as pd
import csv
from datetime import datetime, timezone
from io import BytesIO

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import (
    TOKEN, SELF_URL, PORT,
    ZONES_CSV_URL, BRANCH_URLS, NOTIFY_URLS,
    NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK
)
from zones import normalize_sheet_url, load_zones

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã-–ª–æ–≥–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for lf in (NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK):
    if not os.path.exists(lf):
        with open(lf, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([
                "Filial","–†–≠–°",
                "SenderID","SenderName",
                "RecipientID","RecipientName",
                "Timestamp","Coordinates"
            ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def build_initial_kb(vis_flag: str):
    f = vis_flag.upper()
    nets = (["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì","‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if f=="ALL"
            else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if f=="UG"
            else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
    rows = [[n] for n in nets] + [["üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"],["üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"],["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"],["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

def build_report_kb(f: str):
    f = f.upper()
    rows = []
    if f in ("ALL","UG"): rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"])
    if f in ("ALL","RK"): rows.append(["üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
    rows += [["üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"],["üîô –ù–∞–∑–∞–¥"]]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# /start
async def start_cmd(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = u.effective_user.id
    vis, br_raw, res_map, names, resp_map = load_zones()
    if uid not in br_raw:
        return await u.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
    ctx.user_data.clear()
    ctx.user_data.update({
        "step":       "INIT",
        "vis_flag":   vis[uid],
        "res_user":   res_map[uid],
        "name":       names[uid],
        "resp_map":   resp_map
    })
    await u.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=build_initial_kb(vis[uid])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_text(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if "step" not in ctx.user_data:
        return await start_cmd(u, ctx)

    text = u.message.text.strip()
    uid  = u.effective_user.id
    step = ctx.user_data["step"]
    vis  = ctx.user_data["vis_flag"]
    resu = ctx.user_data["res_user"]
    name = ctx.user_data["name"]

    # BACK
    if text=="üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º
        if step in ("AWAIT_TP_INPUT","DISAMBIGUOUS"):
            ctx.user_data["step"]="INIT"
            return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",reply_markup=build_initial_kb(vis))
        if step=="INIT":
            return
        ctx.user_data["step"]="INIT"
        return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",reply_markup=build_initial_kb(vis))

    # INIT: –≤—ã–±–æ—Ä —Å–µ—Ç–∏ / —Ç–µ–ª–µ—Ñ–æ–Ω—ã / –æ—Ç—á—ë—Ç
    if step=="INIT":
        if text=="üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            ctx.user_data["step"]="VIEW_PHONES"
            return await u.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã ‚Ä¶",reply_markup=kb_back)
        if text=="üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            ctx.user_data["step"]="REPORT_MENU"
            return await u.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:",reply_markup=build_report_kb(vis))
        # –°–µ—Ç—å
        allowed = (["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì","‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if vis=="ALL"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if vis=="UG"
                   else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"])
        if text not in allowed:
            return await u.message.reply_text(f"{name}, –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed)}",reply_markup=build_initial_kb(vis))
        net = text.replace("‚ö° ","")
        ctx.user_data.update({"step":"NET","net":net})
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª–∏–∞–ª—ã
        rows = [[b] for b in BRANCH_URLS[net].keys()]+[["üîô –ù–∞–∑–∞–¥"]]
        return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",reply_markup=ReplyKeyboardMarkup(rows,resize_keyboard=True))

    # REPORT_MENU
    if step=="REPORT_MENU":
        if text=="üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –Æ–ì":
            df = pd.read_csv(NOTIFY_LOG_FILE_UG)
            bio=BytesIO()
            with pd.ExcelWriter(bio,engine="openpyxl") as w:
                df.to_excel(w,index=False,sheet_name="UG")
            bio.seek(0)
            await ctx.bot.send_document(uid,document=bio,filename="log_ug.xlsx")
            return await u.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:",reply_markup=build_report_kb(vis))
        if text=="üìä –õ–æ–≥–∏ –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å":
            df = pd.read_csv(NOTIFY_LOG_FILE_RK)
            bio=BytesIO()
            with pd.ExcelWriter(bio,engine="openpyxl") as w:
                df.to_excel(w,index=False,sheet_name="RK")
            bio.seek(0)
            await ctx.bot.send_document(uid,document=bio,filename="log_rk.xlsx")
            return await u.message.reply_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:",reply_markup=build_report_kb(vis))
        if text=="üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º":
            return await u.message.reply_text("üìã –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã‚Ä¶",reply_markup=build_report_kb(vis))

    # NET: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    if step=="NET":
        net = ctx.user_data["net"]
        if text not in BRANCH_URLS[net]:
            return await u.message.reply_text(f"{name}, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Ñ–∏–ª–∏–∞–ª {text}",reply_markup=kb_back)
        ctx.user_data.update({"step":"BRANCH","branch":text})
        return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",reply_markup=kb_actions)

    # BRANCH: –ø–æ–∏—Å–∫ / —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if step=="BRANCH":
        if text=="üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            ctx.user_data["step"]="AWAIT_TP_INPUT"
            return await u.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",reply_markup=kb_back)
        if text=="üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            ctx.user_data["step"]="NOTIFY_AWAIT_TP"
            return await u.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",reply_markup=kb_back)

    # AWAIT_TP_INPUT: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    if step=="AWAIT_TP_INPUT":
        net    = ctx.user_data["net"]
        branch = ctx.user_data["branch"]
        url    = BRANCH_URLS[net].get(branch,"")
        if not url:
            return await u.message.reply_text(f"‚ö† URL –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {branch} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",reply_markup=kb_back)
        df = pd.read_csv(normalize_sheet_url(url))
        # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –†–≠–°
        if resu!="All":
            df = df[df["–†–≠–°"].str.upper()==resu.upper()]
        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W","",regex=True)
        q = re.sub(r"\W","",text.upper())
        found = df[df["D_UP"].str.contains(q,na=False)]
        if found.empty:
            return await u.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",reply_markup=kb_back)
        # –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å
        ulist = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(ulist)>1:
            ctx.user_data.update({"step":"DISAMB","amb":found})
            kb = ReplyKeyboardMarkup([[x] for x in ulist]+[["üîô –ù–∞–∑–∞–¥"]],resize_keyboard=True)
            return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü:",reply_markup=kb)
        # –≤—ã–≤–æ–¥ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        tp = ulist[0]
        det=found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        cnt=len(det)
        resname=det.iloc[0]["–†–≠–°"]
        await u.message.reply_text(f"{resname}, {tp} ({cnt}) –í–û–õ–°:",reply_markup=kb_actions)
        for _,r in det.iterrows():
            await u.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        ctx.user_data["step"]="BRANCH"
        return

    # DISAMB: —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¢–ü
    if step=="DISAMB":
        if text=="üîô –ù–∞–∑–∞–¥":
            ctx.user_data["step"]="AWAIT_TP_INPUT"
            return await u.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",reply_markup=kb_back)
        df0 = ctx.user_data["amb"]
        if text not in df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            return
        det=df0[df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==text]
        cnt=len(det)
        rn=det.iloc[0]["–†–≠–°"]
        await u.message.reply_text(f"{rn}, {text} ({cnt}) –í–û–õ–°:",reply_markup=kb_actions)
        for _,r in det.iterrows():
            await u.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        ctx.user_data["step"]="BRANCH"
        return

    # NOTIFY_AWAIT_TP: –≤—ã–±–æ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if step=="NOTIFY_AWAIT_TP":
        net    = ctx.user_data["net"]
        branch = ctx.user_data["branch"]
        url    = NOTIFY_URLS[net].get(branch,"")
        if not url:
            return await u.message.reply_text(f"‚ö† URL-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è {branch} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",reply_markup=kb_back)
        dfn = pd.read_csv(normalize_sheet_url(url))
        dfn["D_UP"] = dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W","",regex=True)
        q = re.sub(r"\W","",text.upper())
        found= dfn[dfn["D_UP"].str.contains(q,na=False)]
        if found.empty:
            return await u.message.reply_text("üîî –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",reply_markup=kb_back)
        ulist=found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(ulist)>1:
            ctx.user_data.update({"step":"NOTIFY_DISAMB","dfn":found})
            kb = ReplyKeyboardMarkup([[x] for x in ulist]+[["üîô –ù–∞–∑–∞–¥"]],resize_keyboard=True)
            return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ü:",reply_markup=kb)
        tp=ulist[0]; df0=found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]
        ctx.user_data.update({"step":"NOTIFY_VL","df0":df0,"tp":tp})
        vls=df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        kb=[[v] for v in vls]+[["üîô –ù–∞–∑–∞–¥"]]
        return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:",reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))

    # NOTIFY_DISAMB: —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¢–ü
    if step=="NOTIFY_DISAMB":
        if text=="üîô –ù–∞–∑–∞–¥":
            ctx.user_data["step"]="NOTIFY_AWAIT_TP"
            return await u.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",reply_markup=kb_back)
        df0=ctx.user_data["dfn"]
        if text not in df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique(): return
        df0=df0[df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==text]
        ctx.user_data.update({"step":"NOTIFY_VL","df0":df0,"tp":text})
        vls=df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        kb=[[v] for v in vls]+[["üîô –ù–∞–∑–∞–¥"]]
        return await u.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:",reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))

    # NOTIFY_VL: –≤—ã–±–æ—Ä –í–õ
    if step=="NOTIFY_VL":
        if text=="üîô –ù–∞–∑–∞–¥":
            ctx.user_data["step"]="NOTIFY_AWAIT_TP"
            return await u.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",reply_markup=kb_back)
        df0=ctx.user_data["df0"]
        if text not in df0["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique(): return
        ctx.user_data["vl"]=text
        ctx.user_data["step"]="NOTIFY_GEO"
        return await u.message.reply_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",reply_markup=kb_request_location)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def location_handler(u:Update,ctx:ContextTypes.DEFAULT_TYPE):
    if ctx.user_data.get("step")!="NOTIFY_GEO": return
    loc=u.message.location
    tp  =ctx.user_data["tp"]
    vl  =ctx.user_data["vl"]
    res =ctx.user_data["res_user"]
    sender=ctx.user_data["name"]
    _,_,_,names,resp_map=load_zones()
    recips=[i for i,r in resp_map.items() if r==res]
    msg=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {sender}, {res} –†–≠–°, {tp}, {vl} ‚Äì –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"
    # –ª–æ–≥–∏—Ä—É–µ–º –∏ —à–ª–µ–º
    fpath = NOTIFY_LOG_FILE_UG if ctx.user_data["net"]=="–†–æ—Å—Å–µ—Ç–∏ –Æ–ì" else NOTIFY_LOG_FILE_RK
    for cid in recips:
        await ctx.bot.send_message(cid,msg)
        await ctx.bot.send_location(cid,loc.latitude,loc.longitude)
        await ctx.bot.send_message(cid,f"üìç {loc.latitude:.6f},{loc.longitude:.6f}")
        with open(fpath,"a",newline="",encoding="utf-8") as f:
            csv.writer(f).writerow([
                ctx.user_data["branch"],res,
                u.effective_user.id,sender,
                cid,names.get(cid,""),
                datetime.now(timezone.utc).isoformat(),
                f"{loc.latitude:.6f},{loc.longitude:.6f}"
            ])
    text = (f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(names[c] for c in recips)}"
            if recips else f"‚ö† –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ {res} –†–≠–° –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
    await u.message.reply_text(text,reply_markup=kb_actions)
    ctx.user_data["step"]="BRANCH"

application.add_handler(CommandHandler("start",start_cmd))
application.add_handler(MessageHandler(filters.TEXT&~filters.COMMAND,handle_text))
application.add_handler(MessageHandler(filters.LOCATION,location_handler))

if __name__=="__main__":
    threading.Thread(target=lambda:requests.get(f"{SELF_URL}/webhook"),daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0",port=PORT,
        url_path="webhook",webhook_url=f"{SELF_URL}/webhook"
    )
