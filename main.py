import os
import threading
import re
import requests
import pandas as pd
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import (
    TOKEN, SELF_URL, PORT,
    BRANCH_URLS, VISIBILITY_GROUPS,
    NOTIFY_SHEET_URL
)
from zones import normalize_sheet_url, load_zones

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
kb_initial = ReplyKeyboardMarkup(
    [["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"], ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"], ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"]],
    resize_keyboard=True
)
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def kb_branches(branches):
    return ReplyKeyboardMarkup([[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

kb_actions = ReplyKeyboardMarkup(
    [["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)
kb_request_location = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# === /start ===
async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, bz, rz, names, resp_map = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return
    context.user_data.clear()
    context.user_data.update({
        "step": "INIT",
        "res":   rz[uid],
        "name":  names[uid],
        "resp":  resp_map
    })
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb_initial
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid  = update.effective_user.id
    vis_map, bz, rz, names, resp_map = load_zones()
    if uid not in bz:
        return await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
    step = context.user_data.get("step", "INIT")

    # ‚Äî –ù–∞–∑–∞–¥ ‚Äî
    if text == "üîô –ù–∞–∑–∞–¥":
        # –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Ñ–∏–ª–∏–∞–ª–∞
        if step in ("NOTIFY_WAIT_GEO", "NOTIFY_AWAIT_VL", "NOTIFY_DISAMBIGUOUS",
                    "NOTIFY_AWAIT_TP", "AWAIT_TP_INPUT", "DISAMBIGUOUS", "SEARCH_DONE"):
            context.user_data["step"] = "BRANCH_SELECTED"
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        # –∏–∑ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî –≤ INIT
        if step == "NETWORK_SELECTED":
            context.user_data["step"] = "INIT"
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)
        # INIT, VIEW_PHONES, VIEW_REPORT ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ INIT
        context.user_data["step"] = "INIT"
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_initial)

    # ‚Äî INIT: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî
    if step == "INIT":
        if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            context.user_data["step"] = "VIEW_PHONES"
            return await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n‚Ä¶", reply_markup=kb_back)
        if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç":
            context.user_data["step"] = "VIEW_REPORT"
            return await update.message.reply_text("üìù –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=kb_back)
        if text in VISIBILITY_GROUPS:
            context.user_data["step"]       = "NETWORK_SELECTED"
            context.user_data["visibility"] = text
            return await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
                reply_markup=kb_branches(VISIBILITY_GROUPS[text])
            )
        return

    # ‚Äî NETWORK_SELECTED: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ‚Äî
    if step == "NETWORK_SELECTED":
        branches = VISIBILITY_GROUPS.get(context.user_data["visibility"], [])
        if text in branches:
            context.user_data["step"] = "BRANCH_SELECTED"
            context.user_data["current_branch"] = text
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
        return

    # ‚Äî BRANCH_SELECTED: –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–∏–ª–∏–∞–ª–µ ‚Äî
    if step == "BRANCH_SELECTED":
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = "AWAIT_TP_INPUT"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
        if text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            if context.user_data["res"] == "All":
                return await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –†–≠–°.", reply_markup=kb_actions)
            context.user_data["step"] = "NOTIFY_AWAIT_TP"
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
        return

    # ‚Äî –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¢–ü ‚Äî
    if step == "AWAIT_TP_INPUT":
        branch = context.user_data["current_branch"]
        res    = context.user_data["res"]
        df = pd.read_csv(normalize_sheet_url(BRANCH_URLS[branch]))
        if res != "All":
            df = df[df["–†–≠–°"] == res]
        df.columns = df.columns.str.strip()
        df["D_UP"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r'\W','', regex=True)
        q = re.sub(r'\W','', text.upper())
        found = df[df["D_UP"].str.contains(q, na=False)]
        if found.empty:
            return await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=kb_back)
        unique_tp = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(unique_tp) > 1:
            context.user_data.update({"step":"DISAMBIGUOUS","ambiguous_df":found})
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            return await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –¢–ü, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
        tp = unique_tp[0]
        details = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == tp]
        cnt = len(details); res_name = details.iloc[0]["–†–≠–°"]
        await update.message.reply_text(
            f"{res_name}, {tp} ({cnt}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_actions
        )
        for _, r in details.iterrows():
            await update.message.reply_text(
                f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                reply_markup=kb_actions
            )
        context.user_data["step"] = "BRANCH_SELECTED"
        return

    # ‚Äî DISAMBIGUOUS: –≤—ã–±–æ—Ä –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ‚Äî
    if step == "DISAMBIGUOUS":
        df = context.user_data["ambiguous_df"]
        if text in df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            details = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
            cnt = len(details); res_name = details.iloc[0]["–†–≠–°"]
            await update.message.reply_text(
                f"{res_name}, {text} ({cnt}) –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb_actions
            )
            for _, r in details.iterrows():
                await update.message.reply_text(
                    f"üìç –í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                    f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}",
                    reply_markup=kb_actions
                )
            context.user_data["step"] = "BRANCH_SELECTED"
        return

    # ‚Äî NOTIFY_AWAIT_TP: –ø–æ–∏—Å–∫ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî
    if step == "NOTIFY_AWAIT_TP":
        dfn = pd.read_csv(normalize_sheet_url(NOTIFY_SHEET_URL))
        dfn.columns = dfn.columns.str.strip()
        dfn["D_UP"] = dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r'\W','',regex=True)
        q = re.sub(r'\W','', text.upper()); found = dfn[dfn["D_UP"].str.contains(q,na=False)]
        if found.empty:
            return await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:", reply_markup=kb_back)
        u = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique().tolist()
        if len(u)>1:
            context.user_data.update({"step":"NOTIFY_DISAMBIGUOUS","notify_df":found})
            kb = ReplyKeyboardMarkup([[tp] for tp in u]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            return await update.message.reply_text("–ù–µ—Å–∫–æ–ª—å–∫–æ –¢–ü‚Äî–≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
        tp = u[0]
        context.user_data.update({"step":"NOTIFY_AWAIT_VL","notify_df":found,"notify_tp":tp})
        vls = found[found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
        kb = ReplyKeyboardMarkup([[vl] for vl in vls]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=kb)

    # ‚Äî NOTIFY_DISAMBIGUOUS: –≤—ã–±–æ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî
    if step == "NOTIFY_DISAMBIGUOUS":
        dfn = context.user_data["notify_df"]
        if text in dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].unique():
            tp = text
            context.user_data.update({"step":"NOTIFY_AWAIT_VL","notify_tp":tp})
            vls = dfn[dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"]==tp]["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique().tolist()
            kb = ReplyKeyboardMarkup([[vl] for vl in vls]+[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=kb)

    # ‚Äî NOTIFY_AWAIT_VL: –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî
    if step == "NOTIFY_AWAIT_VL" and text:
        dfn = context.user_data["notify_df"]
        if text in dfn["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique():
            context.user_data["step"] = "NOTIFY_WAIT_GEO"
            context.user_data["notify_vl"] = text
            return await update.message.reply_text(
                "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                reply_markup=kb_request_location
            )

# === –õ–æ–≤–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ===
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") != "NOTIFY_WAIT_GEO":
        return
    loc = update.message.location
    sender_id = update.effective_user.id

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    _, _, rz_map, _, resp_map = load_zones()
    sender_res = context.user_data["res"]
    sender_name = context.user_data["name"]
    tp = context.user_data["notify_tp"]
    vl = context.user_data["notify_vl"]

    # –ø–æ–ª—É—á–∞—Ç–µ–ª–∏: –≤—Å–µ, —É –∫–æ–≥–æ resp_map == sender_res
    recipients = [uid2 for uid2, resp in resp_map.items() if resp == sender_res]

    if not recipients:
        return await update.message.reply_text(
            "‚ùå –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –í–∞—à–µ–≥–æ –†–≠–°.",
            reply_markup=kb_actions
        )

    notif_text = f"{sender_name}, {sender_res}, {tp}, {vl} ‚Äî –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"
    for cid in recipients:
        await context.bot.send_message(chat_id=cid, text=notif_text)
        await context.bot.send_location(chat_id=cid, latitude=loc.latitude, longitude=loc.longitude)

    await update.message.reply_text(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(map(str,recipients))}",
        reply_markup=kb_actions
    )
    context.user_data["step"] = "BRANCH_SELECTED"

# ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º ‚Äî
application.add_handler(CommandHandler("start", start_line))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

if __name__ == "__main__":
    threading.Thread(target=lambda: requests.get(f"{SELF_URL}/webhook"), daemon=True).start()
    application.run_webhook(
        listen="0.0.0.0", port=PORT,
        url_path="webhook", webhook_url=f"{SELF_URL}/webhook"
    )
