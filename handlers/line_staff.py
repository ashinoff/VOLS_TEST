from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CommandHandler
from zones import load_zones
from search import search_tp

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def kb_select_branch(branches):
    return ReplyKeyboardMarkup([[b] for b in branches], resize_keyboard=True)

def kb_search():
    return ReplyKeyboardMarkup([["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞"]], resize_keyboard=True)

async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    branch, res, name = bz[uid], rz[uid], names[uid]

    if res != "All":
        context.user_data["mode"] = 3
        context.user_data["current_branch"] = branch
        context.user_data["current_res"] = res
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í—ã ‚Äî –ª–∏–Ω–µ–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª –†–≠–° {res} —Ñ–∏–ª–∏–∞–ª–∞ {branch}.",
            reply_markup=kb_search()
        )
    elif branch != "All":
        context.user_data["mode"] = 2
        context.user_data["current_branch"] = branch
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í—ã ‚Äî –ª–∏–Ω–µ–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª —Ñ–∏–ª–∏–∞–ª–∞ {branch}.",
            reply_markup=kb_search()
        )
    else:
        context.user_data["mode"] = 1
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –ª—é–±–æ–º—É —Ñ–∏–ª–∏–∞–ª—É.",
            reply_markup=kb_select_branch(list(context.bot_data["branches"]))
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    mode = context.user_data.get("mode", 1)

    if text == "–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb_select_branch(list(context.bot_data["branches"])))
        return

    if mode == 1:
        if text in context.bot_data["branches"]:
            context.user_data["current_branch"] = text
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {text}:", reply_markup=kb_search())
            return
        if text == "–ü–æ–∏—Å–∫ –ø–æ –¢–ü" and "current_branch" in context.user_data:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_search())
            return

    branch = context.user_data.get("current_branch")
    res    = context.user_data.get("current_res")
    df = search_tp(branch, text, res_filter=res)
    if df.empty:
        await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_search())
        return

    for _, row in df.iterrows():
        await update.message.reply_text(
            f"üìç {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']}\n"
            f"–í–õ {row['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {row['–û–ø–æ—Ä—ã']} ({row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
            + (f", –¥–æ–≥–æ–≤–æ—Ä {row.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if row.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
            reply_markup=kb_search()
        )

handler_start = CommandHandler("start", start_line)
handler_text  = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
