from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from zones import load_zones
from search import search_tp
from config import VISIBILITY_GROUPS

# --- Keyboards ---
kb_initial = ReplyKeyboardMarkup(
    [["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"], ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"], ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"], ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"]],
    resize_keyboard=True
)

def kb_back():
    return ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)

def kb_branches(branches):
    btns = [[b] for b in branches]
    btns.append(["–ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)

def kb_search():
    return ReplyKeyboardMarkup(
        [["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

# --- Handlers ---
async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    context.user_data.clear()
    await update.message.reply_text(
        f"üë∑ –ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb_initial
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid = update.message.from_user.id
    vis_map, bz, rz, names = load_zones()

    # –ù–∞–∑–∞–¥
    if text == "–ù–∞–∑–∞–¥":
        return await start_line(update, context)

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏
    if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
        await update.message.reply_text(
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ...",
            reply_markup=kb_back()
        )
        return
    if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç":
        await update.message.reply_text(
            "üìù –í–∞—à –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=kb_back()
        )
        return

    # –í—ã–±–æ—Ä —Å–µ—Ç–∏ (–≤–∏–¥–∏–º–æ—Å—Ç–∏)
    if text in VISIBILITY_GROUPS and text not in ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
        context.user_data.clear()
        context.user_data["visibility"] = text
        branches = VISIBILITY_GROUPS[text]
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
            reply_markup=kb_branches(branches)
        )
        return

    # –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    if "visibility" in context.user_data and "current_branch" not in context.user_data:
        branches = VISIBILITY_GROUPS[context.user_data["visibility"]]
        if text in branches:
            context.user_data["current_branch"] = text
            await update.message.reply_text(
                f"–§–∏–ª–∏–∞–ª {text} –≤—ã–±—Ä–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫ –ø–æ –¢–ü':",
                reply_markup=kb_search()
            )
        return

    # –ü–æ–∏—Å–∫ –ø–æ –¢–ü –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏
    if "current_branch" in context.user_data:
        branch = context.user_data["current_branch"]
        res = context.user_data.get("res")

        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏
        if "ambiguous" in context.user_data and text == context.user_data.get("ambiguous_prompt"):
            # –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            tp_selected = text
            found_df = context.user_data["ambiguous_df"]
            matched = found_df[found_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == tp_selected]
            # –≤—ã–≤–æ–¥ –æ–¥–Ω–æ–π TP
            lines = []
            for _, r in matched.iterrows():
                lines.append(f"üìç {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']}")
                lines.append(f"–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}")
                lines.append(f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})")
                prov = r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')
                num  = r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞','')
                tail = f", –¥–æ–≥–æ–≤–æ—Ä {num}" if num else ""
                lines.append(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {prov}{tail}")
                lines.append("")
            await update.message.reply_text("
".join(lines).strip(), reply_markup=kb_search())
            # –æ—á–∏—Å—Ç–∫–∞
            context.user_data.pop('ambiguous')
            context.user_data.pop('ambiguous_df')
            context.user_data.pop('ambiguous_prompt')
            return

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –ü–æ–∏—Å–∫ –ø–æ –¢–ü –∏–ª–∏ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –≤–ø–µ—Ä–≤—ã–µ
        if text == "–ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü:",
                reply_markup=kb_back()
            )
            return

        # —Å–∞–º –ø–æ–∏—Å–∫
        df = search_tp(branch, text, res_filter=res)
        if df.empty:
            await update.message.reply_text(
                "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=kb_search()
            )
            return
        # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        unique_tp = df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'].unique().tolist()
        if len(unique_tp) > 1:
            # –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å
            context.user_data['ambiguous'] = unique_tp
            context.user_data['ambiguous_df'] = df
            context.user_data['ambiguous_prompt'] = None  # will set to chosen
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp] + [["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(
                "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü:",
                reply_markup=kb
            )
            return
        # —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ
        tp_name = unique_tp[0]
        matched = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == tp_name]
        lines = []
        for _, r in matched.iterrows():
            lines.append(f"üìç {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']}")
            lines.append(f"–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}")
            lines.append(f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})")
            prov = r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')
            num  = r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞','')
            tail = f", –¥–æ–≥–æ–≤–æ—Ä {num}" if num else ""
            lines.append(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {prov}{tail}")
            lines.append("")
        await update.message.reply_text("
".join(lines).strip(), reply_markup=kb_search())
        return

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
handler_start = CommandHandler("start", start_line)
handler_text = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
