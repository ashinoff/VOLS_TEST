from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from zones import load_zones
from search import search_tp
from config import VISIBILITY_GROUPS

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_visibility = ReplyKeyboardMarkup(
    [[name] for name in VISIBILITY_GROUPS.keys()],
    resize_keyboard=True
)

def kb_branches(branches):
    return ReplyKeyboardMarkup([[b] for b in branches], resize_keyboard=True)

kb_search = ReplyKeyboardMarkup(
    [["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞"]],
    resize_keyboard=True
)

async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    vis, branch, res, name = vis_map[uid], bz[uid], rz[uid], names[uid]
    context.user_data.clear()
    context.user_data['role'] = 'line_staff'
    context.user_data['res'] = res
    # –®–∞–≥ 1: –≤—ã–±–æ—Ä –≤–∏–¥–∏–º–æ—Å—Ç–∏
    if vis != 'All':
        context.user_data['visibility'] = vis
        branches = VISIBILITY_GROUPS.get(vis, [])
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í–∏–¥–∏–º–æ—Å—Ç—å: {vis}.",
            reply_markup=kb_branches(branches)
        )
    else:
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∏–ª–∏–∞–ª–æ–≤:",
            reply_markup=kb_visibility
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if context.user_data.get('role') != 'line_staff':
        return
    # –®–∞–≥ 2: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    if 'visibility' in context.user_data and 'current_branch' not in context.user_data:
        branches = VISIBILITY_GROUPS[context.user_data['visibility']]
        if text in branches:
            context.user_data['current_branch'] = text
            await update.message.reply_text(
                f"–§–∏–ª–∏–∞–ª {text} –≤—ã–±—Ä–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",
                reply_markup=kb_search
            )
        elif text in VISIBILITY_GROUPS:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É –≤–º–µ—Å—Ç–æ —Ñ–∏–ª–∏–∞–ª–∞
            branches = VISIBILITY_GROUPS[text]
            context.user_data['visibility'] = text
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
                reply_markup=kb_branches(branches)
            )
        return
    # –®–∞–≥ 3: –ø–æ–∏—Å–∫ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞
    if text == '–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
            reply_markup=kb_branches(VISIBILITY_GROUPS[context.user_data['visibility']])
        )
        return
    if text == '–ü–æ–∏—Å–∫ –ø–æ –¢–ü':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",
            reply_markup=kb_search
        )
        return
    # –®–∞–≥ 4: –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    df = search_tp(
        context.user_data['current_branch'],
        text,
        res_filter=context.user_data.get('res')
    )
    if df.empty:
        await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_search)
        return
    for _, r in df.iterrows():
        await update.message.reply_text(
            f"üìç {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']}\n"
            f"–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
            + (f", –¥–æ–≥–æ–≤–æ—Ä {r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
            reply_markup=kb_search
        )

handler_start = CommandHandler("start", start_line)
handler_text = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
