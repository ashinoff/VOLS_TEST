# handlers/line_staff.py  (–∏–∑–º–µ–Ω–µ–Ω)

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from zones import load_zones
from search import search_tp
from config import VISIBILITY_GROUPS

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
kb_initial = ReplyKeyboardMarkup(
    [
        ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"],
        ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"],
        ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"],
        ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"],
    ],
    resize_keyboard=True
)

# ¬´–ù–∞–∑–∞–¥¬ª
kb_back = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)

# –§–∏–ª–∏–∞–ª—ã + –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
def kb_branches(branches):
    btns = [[b] for b in branches]
    btns.append(["–ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)

# –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–ª–∏–∞–ª–∞
kb_search = ReplyKeyboardMarkup(
    [["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é."""
    uid = update.effective_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # —Å–±—Ä–æ—Å–∏–º –≤—Å—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    context.user_data['step'] = 'INIT'

    await update.message.reply_text(
        f"üë∑ –ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb_initial
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid = update.effective_user.id
    vis_map, bz, rz, names = load_zones()

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –≤—ã—Ö–æ–¥
    if uid not in bz:
        return

    step = context.user_data.get('step', 'INIT')

    # ======= –û–ë–†–ê–ë–û–¢–ö–ê ¬´–ù–ê–ó–ê–î¬ª =======
    if text == "–ù–∞–∑–∞–¥":
        # –ü–æ —É—Ä–æ–≤–Ω—é —à–∞–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
        if step == 'DISAMBIGUOUS':
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¢–ü
            context.user_data['step'] = 'AWAIT_TP_INPUT'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
            return

        if step == 'AWAIT_TP_INPUT' or step == 'BRANCH_SELECTED':
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
            vis = context.user_data.get('visibility')
            branches = VISIBILITY_GROUPS.get(vis, [])
            context.user_data['step'] = 'NETWORK_SELECTED'
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb_branches(branches))
            return

        if step == 'NETWORK_SELECTED':
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            await start_line(update, context)
            return

        # –≤ INIT ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´–ù–∞–∑–∞–¥¬ª
        return

    # ======= –®–ê–ì INIT: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =======
    if step == 'INIT':
        if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
            await update.message.reply_text("üìû –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n...", reply_markup=kb_back)
            return
        if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç":
            await update.message.reply_text("üìù –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=kb_back)
            return
        if text in VISIBILITY_GROUPS:
            # –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å
            context.user_data['visibility'] = text
            context.user_data['step'] = 'NETWORK_SELECTED'
            branches = VISIBILITY_GROUPS[text]
            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å ‚Äî —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb_branches(branches))
            return
        # –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        return

    # ======= –®–ê–ì NETWORK_SELECTED: –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ =======
    if step == 'NETWORK_SELECTED':
        branches = VISIBILITY_GROUPS.get(context.user_data['visibility'], [])
        if text in branches:
            # –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª
            context.user_data['current_branch'] = text
            context.user_data['step'] = 'BRANCH_SELECTED'
            await update.message.reply_text(
                f"–§–∏–ª–∏–∞–ª {text} –≤—ã–±—Ä–∞–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=kb_search
            )
        return

    # ======= –®–ê–ì BRANCH_SELECTED: –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ =======
    if step == 'BRANCH_SELECTED':
        if text == "–ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            # –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –≤–≤–æ–¥—É
            context.user_data['step'] = 'AWAIT_TP_INPUT'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_back)
        return

    # ======= –®–ê–ì AWAIT_TP_INPUT: –≤–≤–æ–¥ –¢–ü –∏ –ø–æ–∏—Å–∫ =======
    if step == 'AWAIT_TP_INPUT':
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        branch = context.user_data['current_branch']
        res    = context.user_data.get('res')
        df = search_tp(branch, text, res_filter=res)

        if df.empty:
            await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_search)
            context.user_data['step'] = 'BRANCH_SELECTED'
            return

        # –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å
        unique_tp = df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'].unique().tolist()
        if len(unique_tp) > 1:
            # –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¢–ü
            context.user_data['ambiguous_list'] = unique_tp
            context.user_data['ambiguous_df']   = df
            context.user_data['step'] = 'DISAMBIGUOUS'
            kb = ReplyKeyboardMarkup([[tp] for tp in unique_tp] + [["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –¢–ü, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
            return

        # —Ç–æ—á–Ω–æ –æ–¥–Ω–∞ –¢–ü
        tp_name = unique_tp[0]
        found = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == tp_name]
        for _, r in found.iterrows():
            await update.message.reply_text(
                f"üìç {tp_name}\n"
                f"–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
                + (f", –¥–æ–≥–æ–≤–æ—Ä {r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
                reply_markup=kb_search
            )
        context.user_data['step'] = 'BRANCH_SELECTED'
        return

    # ======= –®–ê–ì DISAMBIGUOUS: –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¢–ü =======
    if step == 'DISAMBIGUOUS':
        options = context.user_data.get('ambiguous_list', [])
        if text in options:
            df = context.user_data['ambiguous_df']
            found = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == text]
            for _, r in found.iterrows():
                await update.message.reply_text(
                    f"üìç {text}\n"
                    f"–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                    f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
                    + (f", –¥–æ–≥–æ–≤–æ—Ä {r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
                    reply_markup=kb_search
                )
            context.user_data['step'] = 'BRANCH_SELECTED'
        return

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ main.py:
handler_start = CommandHandler("start", start_line)
handler_text  = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
