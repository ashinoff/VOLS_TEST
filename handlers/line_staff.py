from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters, CommandHandler
from zones import load_zones
from search import search_tp
from config import VISIBILITY_GROUPS

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏ —Ñ–∏–ª–∏–∞–ª–∞

def kb_visibility():
    return ReplyKeyboardMarkup([[v] for v in VISIBILITY_GROUPS.keys()], resize_keyboard=True)

def kb_branches(branches):
    return ReplyKeyboardMarkup([[b] for b in branches], resize_keyboard=True)

def kb_search():
    return ReplyKeyboardMarkup([["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞"]], resize_keyboard=True)

async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    vis, branch, res, name = vis_map[uid], bz[uid], rz[uid], names[uid]
    context.user_data.clear()
    context.user_data['role'] = 'line_staff'
    context.user_data['res']  = res
    # –ï—Å–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∞ —è–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if vis != 'All':
        context.user_data['visibility'] = vis
        branches = VISIBILITY_GROUPS.get(vis, [])
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–∏–¥–∏–º–æ—Å—Ç–∏: {vis}.",
            reply_markup=kb_branches(branches)
        )
    else:
        # –î–ª—è All –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É
        await update.message.reply_text(
            f"üë∑ –ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∏–ª–∏–∞–ª–æ–≤ (RK –∏–ª–∏ RU):",
            reply_markup=kb_visibility()
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    role = context.user_data.get('role')
    if role != 'line_staff':
        return

    # 1) –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞
    if 'visibility' not in context.user_data:
        if text in VISIBILITY_GROUPS:
            context.user_data['visibility'] = text
            branches = VISIBILITY_GROUPS[text]
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
                reply_markup=kb_branches(branches)
            )
        return

    # 2) –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    if 'current_branch' not in context.user_data:
        branches = VISIBILITY_GROUPS[context.user_data['visibility']]
        if text in branches:
            context.user_data['current_branch'] = text
            await update.message.reply_text(
                f"–§–∏–ª–∏–∞–ª {text} –≤—ã–±—Ä–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",
                reply_markup=kb_search()
            )
        return

    # 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –¢–ü
    if text == '–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞':
        branches = VISIBILITY_GROUPS[context.user_data['visibility']]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb_branches(branches)
        )
        return

    if text == '–ü–æ–∏—Å–∫ –ø–æ –¢–ü':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:", reply_markup=kb_search()
        )
        return

    # –°–∞–º –ø–æ–∏—Å–∫
    branch = context.user_data['current_branch']
    res    = context.user_data.get('res')
    df     = search_tp(branch, text, res_filter=res)
    if df.empty:
        await update.message.reply_text(
            "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_search()
        )
        return

    for _, row in df.iterrows():
        await update.message.reply_text(
            f"üìç {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']}\n"
            f"–í–õ {row['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {row['–û–ø–æ—Ä—ã']} ({row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
            + (f", –¥–æ–≥–æ–≤–æ—Ä {row.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if row.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
            reply_markup=kb_search()
        )

handler_start = CommandHandler("start", start_line)
handler_text  = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
