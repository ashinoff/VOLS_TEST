from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from zones import load_zones
from search import search_tp
from config import VISIBILITY_GROUPS

# –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é: —Å–µ—Ç–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –æ—Ç—á–µ—Ç
initial_buttons = [
    ["–†–æ—Å—Å–µ—Ç–∏ –Æ–ì"],
    ["–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"],
    ["–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"],
    ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"],
]
kb_initial = ReplyKeyboardMarkup(initial_buttons, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
def kb_back():
    return ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
def kb_branches(branches):
    btns = [[b] for b in branches]
    btns.append(["–ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(btns, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞
def kb_search():
    return ReplyKeyboardMarkup(
        [["–ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["–ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

async def start_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    vis_map, bz, rz, names = load_zones()
    if uid not in bz:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    context.user_data.clear()
    await update.message.reply_text(
        f"üë∑ –ü—Ä–∏–≤–µ—Ç, {names[uid]}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=kb_initial
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uid = update.message.from_user.id
    vis_map, bz, rz, names = load_zones()

    # –ù–∞–∑–∞–¥
    if text == "–ù–∞–∑–∞–¥":
        return await start_line(update, context)

    # –ì–ª–∞–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
    if text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤":
        await update.message.reply_text(
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ...",
            reply_markup=kb_back()
        )
        return
    if text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç":
        await update.message.reply_text(
            "üìù –í–∞—à –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=kb_back()
        )
        return

    # –í—ã–±–æ—Ä —Å–µ—Ç–∏
    if text in ("–†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"):
        context.user_data["visibility"] = text
        branches = VISIBILITY_GROUPS[text]
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
            reply_markup=kb_branches(branches)
        )
        return

    # –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    if "visibility" in context.user_data and "current_branch" not in context.user_data:
        branches = VISIBILITY_GROUPS[context.user_data["visibility"]]
        if text in branches:
            context.user_data["current_branch"] = text
            await update.message.reply_text(
                f"–§–∏–ª–∏–∞–ª {text} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",
                reply_markup=kb_search()
            )
        return

    # –ü–æ–∏—Å–∫ –ø–æ –¢–ü
    if "current_branch" in context.user_data:
        if text == "–ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–ü:",
                reply_markup=kb_back()
            )
            return
        branch = context.user_data["current_branch"]
        res = context.user_data.get("res")
        df = search_tp(branch, text, res_filter=res)
        if df.empty:
            await update.message.reply_text(
                "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=kb_back()
            )
            return
        for _, r in df.iterrows():
            await update.message.reply_text(
                f"üìç {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']}\n"
                f"–í–õ {r['–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è']} {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
                f"–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n"
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞','')}"
                + (f", –¥–æ–≥–æ–≤–æ—Ä {r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')}" if r.get('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞') else ""),
                reply_markup=kb_back()
            )
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
    return await start_line(update, context)

handler_start = CommandHandler("start", start_line)
handler_text = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
